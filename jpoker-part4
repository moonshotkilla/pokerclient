    //
    // player self (table plugin helper)
    //
    jpoker.plugins.playerSelf = {
        create: function(table, packet, id) {
            var game_window = $('#game_window' + id);
            table.registerUpdate(this.updateTable, id, 'self update' + id);

            var url = table.url;
            var game_id = packet.game_id;
            var serial = packet.serial;
            var player = table.serial2player[serial];
            var names = [ 'check', 'call', 'raise', 'fold', 'allin', 'pot', 'halfpot', 'threequarterpot' ];
            var labels = [ _("check"), _("call") + ' <span class=\'jpoker_call_amount\'></span>', _("Raise"), _("fold"), _("all in"), _("pot"), _("1/2"), _("3/4") ];
            for(var i = 0; i < names.length; i++) {
                $('#' + names[i] + id).html(jpoker.plugins.playerSelf.templates.action.supplant({ action: labels[i] })).hover(function(){
                        $(this).addClass('hover');
                    },function(){
                        $(this).removeClass('hover');
                    });
            }
            //
            // rebuy
            //
            var rebuy = $('#rebuy' + id);
            rebuy.click(function() {
                    var server = jpoker.getServer(url);
                    if(server && server.loggedIn()) {
                        var element = jpoker.plugins.playerSelf.rebuy(url, game_id, serial, id);
                        if(element) {
                            element.dialog('open');
                            server.getUserInfo();
                        }
                    }
                });
            rebuy.hover(function(){
                        $(this).addClass('hover');
                    },function(){
                        $(this).removeClass('hover');
                    });
            rebuy.html(jpoker.plugins.playerSelf.templates.rebuy_button.supplant({ rebuy: _("Rebuy") }));
            rebuy.show();

            //
            // sitout
            //
            $('#sitout' + id).html(jpoker.plugins.playerSelf.templates.sitout.supplant({ sitout: _("sit out") }));
            $('#sitout' + id).click(function() {
                    var info = jpoker.getServerTablePlayer(url, table.id, serial);
                    if(info.server && info.server.loggedIn()) {
                        server.sendPacket({ 'type': 'PacketPokerSitOut',
                                    'game_id': table.id,
                                    'serial': serial });
                        $(this).hide();
                    }
                    return false;
                }).hover(function(){
                        $(this).addClass('hover');
                    },function(){
                        $(this).removeClass('hover');
                    });


            $('<div id=\'sitout_fold' + id  + '\'>').insertAfter('#sitout' + id).addClass('jpoker_ptable_sitout_fold').html(jpoker.plugins.playerSelf.templates.sitout.supplant({ sitout: _("fold/sit out") })).click(function() {
                var info = jpoker.getServerTablePlayer(url, table.id, serial);
                    if(info.server && info.server.loggedIn()) {
                        info.player.sit_out_fold_sent = true;
                        server.sendPacket({ 'type': 'PacketPokerSitOut',
                                    'game_id': table.id,
                                    'serial': serial });
                        server.sendPacket({ 'type': 'PacketPokerFold',
                                    'game_id': table.id,
                                    'serial': serial });
                        $(this).hide();
                    }
                    return false;
                }).hover(function(){
                        $(this).addClass('hover');
                    },function(){
                        $(this).removeClass('hover');
                    });

            //
            // sitin
            //
            $('#sitin' + id).html(jpoker.plugins.playerSelf.templates.sitin.supplant({ sitin: _("sit in") }));
            $('#sitin' + id).click(function() {
                    var server = jpoker.getServer(url);
                    if(server && server.loggedIn()) {
                        server.sendPacket({ 'type': 'PacketPokerAutoBlindAnte',
                                    'serial': serial,
                                    'game_id': game_id
                                    });
                        server.sendPacket({ 'type': 'PacketPokerSit',
                                    'game_id': table.id,
                                    'serial': serial });
                        $(this).hide();
                    }
                    return false;
                }).hover(function(){
                        $(this).addClass('hover');
                    },function(){
                        $(this).removeClass('hover');
                    }).show();

            //
            // chat
            //

            var chat = function() {
                var server = jpoker.getServer(url);
                if(server) {
                    var input = $('.jpoker_chat_input input', game_window);
                    var message = input.attr('value');
                    server.sendPacket({ 'type': 'PacketPokerChat',
                                'serial': server.serial,
                                'game_id': table.id,
                                'message': message
                                });
                    input.attr('value', '');
                }
            };
            $('.jpoker_chat_input', game_window).unbind('keypress').keypress(function(e) {
                    if(e.which == 13) {
                        chat();
                    }
                }).show();

            //
            // muck
            //
            $('#muck_accept' + id).html(jpoker.plugins.muck.templates.muck_accept.supplant({muck_accept_label: _("Muck")})).click(function() {
                    var server = jpoker.getServer(url);
                    server.sendPacket({type: 'PacketPokerMuckAccept', serial: server.serial, game_id: table.id});
                }).hover(function(){
                        $(this).addClass('hover');
                    },function(){
                        $(this).removeClass('hover');
                    });
            $('#muck_deny' + id).html(jpoker.plugins.muck.templates.muck_deny.supplant({muck_deny_label: _("Show")})).click(function() {
                    var server = jpoker.getServer(url);
                    server.sendPacket({type: 'PacketPokerMuckDeny', serial: server.serial, game_id: table.id});
                }).hover(function(){
                        $(this).addClass('hover');
                    },function(){
                        $(this).removeClass('hover');
                    });

            //
            // options
            //
            var options = $('#options' + id).html(jpoker.plugins.options.templates.button.supplant({options_label: _("Options")})).hover(function(){
                    $(this).addClass('hover');
                },function(){
                    $(this).removeClass('hover');
                }).show();
            options.after(jpoker.plugins.options.templates.dialog.supplant({
                        auto_muck: jpoker.plugins.muck.templates.auto_muck.supplant({
                                id: id,
                                    auto_muck_win_label: _("Muck winning"),
                                    auto_muck_win_title: _("Muck winning hands on showdown"),
                                    auto_muck_lose_label: _("Muck losing"),
                                    auto_muck_lose_title: _("Muck losing hands on showdown")})}));
            $('#jpokerOptionsDialog').dialog($.extend({}, jpoker.dialog_options, {title: _("Options")}));
            options.click(function() {
                    $('#jpokerOptionsDialog').dialog('open');
                });

            $('#auto_muck_win' + id).click(function() {
                    var server = jpoker.getServer(url);
                    jpoker.plugins.muck.sendAutoMuck(server, game_id, id);
                });
            $('#auto_muck_lose' + id).click(function() {
                    var server = jpoker.getServer(url);
                    jpoker.plugins.muck.sendAutoMuck(server, game_id, id);
                });

            var server = jpoker.getServer(url);
            $('#auto_muck_win' + id).each(function() { this.checked = server.preferences.auto_muck_win; });
            $('#auto_muck_lose' + id).each(function() { this.checked = server.preferences.auto_muck_lose; });
            jpoker.plugins.muck.sendAutoMuck(server, game_id, id);

            //
            // autoaction
            //
            var auto_action_element = $('#auto_action' + id).html(jpoker.plugins.playerSelf.templates.auto_action.supplant({
                        id: id,
                        auto_check_fold_label: _("Check/Fold"),
                        auto_check_call_label: _("Check/Call any"),
                        auto_raise_label: _("Raise"),
                        auto_check_label: _("check"),
                        auto_call_label: _("Call")
                    }));
            $('.jpoker_auto_action', auto_action_element).hide();
            $('input[type=checkbox]', auto_action_element).click(function() {
                    var clicked = this;
                    $('input[type=checkbox]', auto_action_element).each(function() {
                            if (this != clicked) {
                                this.checked = false;
                            }
                        });
                });

            //
            // hand strength
            //
            var hand_strength_element = $('#hand_strength' + id).html(jpoker.plugins.playerSelf.templates.hand_strength.supplant({
                        label: _("Hand strength:")
                    })).hide();

            if(serial == table.serial_in_position) {
                jpoker.plugins.playerSelf.inPosition(player, id);
            }
            $('#game_window' + id).addClass('jpoker_self');
            $('#sit_seat' + player.seat + id).removeClass('jpoker_self_get_seat');
            $('#seat' + player.seat + id).addClass('jpoker_player_self');
        },

        leave: function(player, packet, id) {
            var game_window = $('#game_window' + id);
            $('#sitout' + id).hide();
            $('#sitout_fold' + id).hide();
            $('#rebuy' + id).hide();
            $('#options' + id).hide();
            $('.jpoker_chat_input', game_window).hide();
            game_window.removeClass('jpoker_self');
            $('#player_seat' + packet.seat + id).removeClass('jpoker_player_self');
        },

        updateTable: function(table, what, packet, id) {
            switch(packet.type) {

            }
            return true;
        },

        rebuy_options: { width: 'none', height: 'none', autoOpen: false, resizable: false },

        rebuy: function(url, game_id, serial, id) {
            $('#rebuy' + id).show();
            var server = jpoker.getServer(url);
            var player = jpoker.getPlayer(url, game_id, serial);
            if(!player) {
                return false;
            }
            var table = jpoker.getTable(url, game_id);
            var limits = table.buyInLimits();
            var rebuy = $('#jpokerRebuy');
            if(rebuy.size() === 0) {
                $('body').append('<div id=\'jpokerRebuy\' class=\'jpoker_jquery_ui\' title=\'' + _("Add chips") + '\' />');
                rebuy = $('#jpokerRebuy');
                rebuy.dialog(this.rebuy_options);
            }
            var packet_type;
            var label;
            if ((player.state == 'buyin') && !player.buy_in_payed) {
                packet_type = 'PacketPokerBuyIn';
                label = _("Buy In");
            } else {
                packet_type = 'PacketPokerRebuy';
                label = _("Rebuy");
            }
            rebuy.html(this.templates.rebuy.supplant({
                        'min': jpoker.chips.SHORT(limits[0]),
                        'current': jpoker.chips.SHORT(limits[1]),
                        'title' : Math.floor(limits[1]*100),
                        'max': jpoker.chips.SHORT(limits[2]),
                        'label': label,
                        'auto_sitin_label': _("Sit in")
                    }));
            $('.jpoker_auto_sitin input', rebuy).each(function() { this.checked = server.preferences.auto_sitin; });

            $('.jpoker_rebuy_action', rebuy).click(function() {
                    var server = jpoker.getServer(url);
                    if(server) {
                        var amount = parseInt($('.jpoker_rebuy_current', rebuy).attr('title'), 10);
                        if (!isNaN(amount)) {
                            server.sendPacket({ 'type': packet_type,
                                        'serial': server.serial,
                                        'game_id': table.id,
                                        'amount': parseInt($('.jpoker_rebuy_current', rebuy).attr('title'), 10)
                                        });
                            if ($('.jpoker_auto_sitin input', rebuy).is(':checked')) {
                                $('#sitin' + id).click();
                            }
                            server.preferences.auto_sitin = $('.jpoker_auto_sitin input', rebuy).is(':checked');
                        } else {
                            jpoker.error('rebuy with NaN amount: ' + $('.jpoker_rebuy_current', rebuy).attr('title'));
                        }
                    }
                    rebuy.dialog('close');
                });
            $('.ui-slider-1', rebuy).slider({
                    min: limits[0]*100,
                        startValue: limits[1]*100,
                        max: limits[2]*100,
                        stepping: 1,
                        change: function(event, ui) {
                        var current = $('.jpoker_rebuy_current').html(ui.value/100.0);
                        current.attr('title', ui.value);
                    }
                });
            return rebuy;
        },

        updateAutoAction: function(player, id) {
        },

        beginRound: function(player, id) {
            var server = jpoker.servers[player.url];
            var table = server.tables[player.game_id];
            var auto_action_element = $('#auto_action' + id);
            if (player.in_game) {
                $('.jpoker_auto_action', auto_action_element).show();
                if (table.betLimit.call > 0) {
                    $('.jpoker_auto_check', auto_action_element).hide();
                    $('.jpoker_call_amount', auto_action_element).text(jpoker.chips.SHORT(table.betLimit.call));
                } else {
                    $('.jpoker_auto_call', auto_action_element).hide();
                }
            }
        },

        highestBetIncrease: function(player, id) {
            var server = jpoker.servers[player.url];
            var table = server.tables[player.game_id];
            var auto_action_element = $('#auto_action' + id);
            if (player.in_game) {
                if (table.betLimit.call > 0) {
                    $('.jpoker_auto_action', auto_action_element).show();
                    $('input[name=auto_check]')[0].checked = false;
                    $('input[name=auto_call]')[0].checked = false;
                    $('input[name=auto_raise]')[0].checked = false;
                    $('.jpoker_auto_check', auto_action_element).hide();
                    $('.jpoker_auto_call', auto_action_element).show();
                    $('.jpoker_call_amount', auto_action_element).text(jpoker.chips.SHORT(table.betLimit.call));
                }
            }
        },


        handStart: function(player, id) {
            var hand_strength_element = $('#hand_strength' + id).hide();
            $('.jpoker_hand_strength_value', hand_strength_element).text('');
        },

        inGame: function(player, id) {
            var auto_action_element = $('#auto_action' + id);
            $('.jpoker_auto_action', auto_action_element).hide();
        },

        handStrength: function(player, hand, id) {
            var hand_strength_element = $('#hand_strength' + id).show();
            $('.jpoker_hand_strength_value', hand_strength_element).text(hand);
            jpoker.plugins.playerSelf.callback.hand_strength.display_done(hand_strength_element);
        },

        tableMove: function(player, packet, id) {
            jpoker.plugins.playerSelf.callback.table_move(packet);
        },

        sit: function(player, id) {
            var name = $('#player_seat' + player.seat + '_name' + id);
            var url = player.url;
            var server = jpoker.servers[url];
            var serial = player.serial;
            var game_id = player.game_id;
            name.unbind('click');
            name.html(player.name);
            name.click(function() {
                    var server = jpoker.servers[url];
                    if(server) {
                        server.sendPacket({ 'type': 'PacketPokerSitOut',
                                    'serial': serial,
                                    'game_id': game_id
                                    });
                    }
                });
            $('#sitout' + id).show();
            $('#sitout_fold' + id).show();
            $('#sitin' + id).hide();
        },

        sitOut: function(player, id) {
            var name = $('#player_seat' + player.seat + '_name' + id);
            var url = player.url;
            var server = jpoker.servers[url];
            var serial = player.serial;
            var game_id = player.game_id;
            name.unbind('click');
            name.html(_("click to sit"));
            name.click(function() {
                    var server = jpoker.servers[url];
                    if(server) {
                        var player = server.tables[game_id].serial2player[serial];
                        if(player.money > jpoker.chips.epsilon) {
                            server.sendPacket({ 'type': 'PacketPokerAutoBlindAnte',
                                        'serial': serial,
                                        'game_id': game_id
                                        });
                            server.sendPacket({ 'type': 'PacketPokerSit',
                                        'serial': serial,
                                        'game_id': game_id
                                        });
                        } else {
                            jpoker.dialog(_("not enough money"));
                        }
                    }
                });
            $('#sitout' + id).hide();
            $('#sitout_fold' + id).hide();
            $('#sitin' + id).show();
        },

        chips: function(player, id) {
            var table = jpoker.getTable(player.url, player.game_id);
            if(table.state == 'end') {
                var limits = table.buyIn;
                if(player.money < limits.max) {
                    $('#rebuy' + id).show();
                } else {
                    $('#rebuy' + id).hide();
                }
            }

            if (table.is_tourney) {
                $('#rebuy' + id).hide();
            } else if ((player.state == 'buyin') &&
                       (player.money === 0) &&
                       (table.reason != 'TablePicker')) {
                $('#rebuy' + id).click();
            } else if (player.state != 'buyin' && player.broke) {
                $('#rebuy' + id).click();
            }
        },

        inPosition: function(player, id) {
            var game_id = player.game_id;
            var serial = player.serial;
            var url = player.url;
            var server = jpoker.getServer(url);
            var table = jpoker.getTable(url, game_id);
            var betLimit = table.betLimit;
            var send = function(what) {
                var server = jpoker.getServer(url);
                if(server) {
                    server.sendPacket({ 'type': 'PacketPoker' + what,
                                'serial': serial,
                                'game_id': game_id
                                });
                }
                return false; // prevent default action on <a href>
            };

            var auto_action_element = $('#auto_action' + id);
            var auto_check_fold_input = $('input[name=auto_check_fold]', auto_action_element);
            var auto_check_call_input = $('input[name=auto_check_call]', auto_action_element);
            var auto_raise_input = $('input[name=auto_raise]', auto_action_element);
            var auto_check_input = $('input[name=auto_check]', auto_action_element);
            var auto_call_input = $('input[name=auto_call]', auto_action_element);

            if (player.sit_out_fold_sent) {
                send('Fold');
            }

            if (auto_check_fold_input.is(':checked')) {
                if (betLimit.call > 0) {
                    send('Fold');
                } else {
                    send('Check');
                }
            }
            if (auto_check_call_input.is(':checked')) {
                if (betLimit.call > 0) {
                    send('Call');
                } else {
                    send('Check');
                }
            }
            if (auto_raise_input.is(':checked')) {
                send('Raise');
            }
            if (auto_check_input.is(':checked')) {
                if (betLimit.call === 0) {
                    send('Check');
                }
            }
            if (auto_call_input.is(':checked')) {
                if (betLimit.call > 0) {
                    send('Call');
                }
            }
            $('input[type=checkbox]', auto_action_element).each(function() {
                    this.checked = false;
                });
            $('.jpoker_auto_action', auto_action_element).hide();

            $('#fold' + id).unbind('click').click(function() { return send('Fold'); }).show();
            if(betLimit.call > 0) {
                var call_element = $('#call' + id);
                $('.jpoker_call_amount', call_element).text(jpoker.chips.SHORT(betLimit.call));
                call_element.unbind('click').click(function() { return send('Call'); }).show();
            } else {
                $('#check' + id).unbind('click').click(function() { return send('Check'); }).show();
            }
            if(betLimit.allin > betLimit.call) {
                var click;
                if(betLimit.max > betLimit.min) {
                    var raise = $('#raise_range' + id);
                    raise.html(jpoker.plugins.raise.getHTML(betLimit));
                    raise.show(); // must be visible otherwise outerWeight/outerWidth returns 0

                    var raise_input = $('#raise_input' + id);
                    raise_input.empty();
                    $('<input class=\'jpoker_raise_input\' type=\'text\'>').appendTo(raise_input).val(betLimit.min);
                    raise_input.show();

                    $('.ui-slider-1', raise).slider({
                            min: betLimit.min,
                                startValue: betLimit.min*100,
                                max: betLimit.max*100,
                                axis: 'horizontal',
                                stepping: betLimit.step*100,
                                change: function(event, ui) {
                                var current = $('.jpoker_raise_current', ui.element);
                                current.html(jpoker.chips.SHORT(ui.value/100.0));
                                current.attr('title', ui.value);
                                $('.jpoker_raise_input', raise_input).val(jpoker.chips.SHORT(ui.value/100.0));
                            }
                        });

                    $('.jpoker_raise_input', raise_input).change(function() {
                            var value = parseFloat($(this).val().replace(',', '.'));
                            if (isNaN(value)) {
                                value = $('.ui-slider-1', raise).slider('value', 0);
                                $(this).val(jpoker.chips.SHORT(value/100.0));
                            } else {
                                $('.ui-slider-1', raise).slider('moveTo', value*100);
                            }
                        });

                    click = function() {
                        var server = jpoker.getServer(url);
                        if(server) {
                            var amount = parseInt($('.jpoker_raise_current', raise).attr('title'), 10);
                            if (!isNaN(amount)) {
                                server.sendPacket({ 'type': 'PacketPokerRaise',
                                            'serial': serial,
                                            'game_id': game_id,
                                            'amount': parseInt($('.jpoker_raise_current', raise).attr('title'), 10)
                                            });
                            } else {
                                jpoker.error('raise with NaN amount: ' + $('.jpoker_raise_current', raise).attr('title'));
                            }
                        }
                    };
                    $('#allin' + id).unbind('click').click(function() {
                            var server = jpoker.getServer(url);
                            if(server) {
                                server.sendPacket({ 'type': 'PacketPokerRaise',
                                            'serial': serial,
                                            'game_id': game_id,
                                            'amount': betLimit.allin*100
                                            });
                            }
                        }).show();
                    if(betLimit.allin > betLimit.pot) {
                       $('#pot' + id).unbind('click').click(function() {
                            var server = jpoker.getServer(url);
                            if(server) {
                                server.sendPacket({ 'type': 'PacketPokerRaise',
                                            'serial': serial,
                                            'game_id': game_id,
                                            'amount': betLimit.pot*100
                                            });
                            }
                        }).show();
                       $('#halfpot' + id).unbind('click').click(function() {
                            var server = jpoker.getServer(url);
                            if(server) {
                                server.sendPacket({ 'type': 'PacketPokerRaise',
                                            'serial': serial,
                                            'game_id': game_id,
                                            'amount': betLimit.pot*50
                                            });
                            }
                        }).show();
                       $('#threequarterpot' + id).unbind('click').click(function() {
                            var server = jpoker.getServer(url);
                            if(server) {
                                server.sendPacket({ 'type': 'PacketPokerRaise',
                                            'serial': serial,
                                            'game_id': game_id,
                                            'amount': betLimit.pot*75
                                            });
                            }
                        }).show();
                    }
                } else {
                    click = function() {
                        var server = jpoker.getServer(url);
                        if(server) {
                            server.sendPacket({ 'type': 'PacketPokerRaise',
                                        'serial': serial,
                                        'game_id': game_id,
                                        'amount': 0
                                        });
                        }
                    };
                }
                $('#raise' + id).unbind('click').click(click).show();
            }
            jpoker.plugins.playerSelf.callback.sound.in_position(server);
            $('#game_window' + id).addClass('jpoker_self_in_position');
        },

        lostPosition: function(player, packet, id) {
            jpoker.plugins.playerSelf.hide(id);
           $('#game_window' + id).removeClass('jpoker_self_in_position');
        },

        timeout: function(player, id, packet) {
            var server = jpoker.getServer(player.url);
            switch(packet.type) {
            case 'PacketPokerTimeoutWarning':
                jpoker.plugins.playerSelf.callback.sound.timeout_warning(server);
                break;
            case 'PacketPokerTimeoutNotice':
                jpoker.plugins.playerSelf.callback.sound.timeout_notice(server);
                break;
            }
        },

        names: [ 'fold', 'call', 'check', 'raise', 'raise_range', 'raise_input', 'rebuy', 'allin', 'pot', 'halfpot', 'threequarterpot' ],

        hide: function(id) {
            for(var i = 0; i < this.names.length; i++) {
                $('#' + this.names[i] + id).hide();
            }
        },

        destroy: function(player, dummy, id) {
            jpoker.plugins.playerSelf.hide(id);
        },

        templates: {
            rebuy: '<div class=\'jpoker_rebuy_bound jpoker_rebuy_min\'>{min}</div><div class=\'ui-slider-1\'><div class=\'ui-slider-handle\'></div></div><div class=\'jpoker_rebuy_current\' title=\'{title}\'>{current}</div><div class=\'jpoker_rebuy_bound jpoker_rebuy_max\'>{max}</div><div class=\'ui-dialog-buttonpane\'><button class=\'jpoker_rebuy_action\'>{label}</button></div><div class=\'jpoker_auto_sitin\'><input name=\'jpoker_auto_sitin\' type=\'checkbox\'></input><label for=\'jpoker_auto_sitin\'>{auto_sitin_label}</label></div>',
            auto_action: '<div class=\'jpoker_auto_check_fold jpoker_auto_action\'><label for=\'auto_check_fold{id}\'>{auto_check_fold_label}</label><input type=\'checkbox\' name=\'auto_check_fold\' id=\'auto_check_fold{id}\' /></div><div class=\'jpoker_auto_check jpoker_auto_action\'><label for=\'auto_check{id}\'>{auto_check_label}</label><input type=\'checkbox\' name=\'auto_check\' id=\'auto_check{id}\' /></div><div class=\'jpoker_auto_call jpoker_auto_action\'><label for=\'auto_call{id}\'>{auto_call_label} <span class=\'jpoker_call_amount\'></span></label><input type=\'checkbox\' name=\'auto_call\' id=\'auto_call{id}\' /></div><div class=\'jpoker_auto_check_call jpoker_auto_action\'><label for=\'auto_check_call{id}\'>{auto_check_call_label}</label><input type=\'checkbox\' name=\'auto_check_call\' id=\'auto_check_call{id}\' /></div><div class=\'jpoker_auto_raise jpoker_auto_action\'><label for=\'auto_raise{id}\'>{auto_raise_label}</label><input type=\'checkbox\' name=\'auto_raise\' id=\'auto_raise{id}\' /></div>',
            hand_strength: '<span class=\'jpoker_hand_strength_label\'>{label}</span> <span class=\'jpoker_hand_strength_value\'></span>',
            action: '<div class=\'jpoker_button\'><a href=\'javascript://\'>{action}</a></div>',
            rebuy_button: '<div class=\'jpoker_rebuy\'><a href=\'javascript://\'>{rebuy}</a></div>',
            sitout: '<div class=\'jpoker_sitout\'><a href=\'javascript://\'>{sitout}</a></div>',
            sitin: '<div class=\'jpoker_sitin\'><a href=\'javascript://\'>{sitin}</a></div>'
        },

        callback: {
            sound: {
                in_position : function(server) {
                    if(server.preferences.sound) {
                        $('#jpokerSound').html('<' + jpoker.sound + ' src=\'' + jpoker.sound_directory + 'player_hand.swf\' />');
                    }
                },
                timeout_warning : function(server) {
                    if(server.preferences.sound) {
                        $('#jpokerSound').html('<' + jpoker.sound + ' src=\'' + jpoker.sound_directory + 'player_timeout_warning.swf\' />');
                    }
                },
                timeout_notice : function(server) {
                    if(server.preferences.sound) {
                        $('#jpokerSound').html('<' + jpoker.sound + ' src=\'' + jpoker.sound_directory + 'player_timeout_notice.swf\' />');
                    }
                }
            },

            hand_strength: { display_done : function() { } },
            
            table_move: function(packet) {
            }
        }
    };

    //
    // options (table plugin helper)
    //

    jpoker.plugins.options = {
        templates: {
            button: '<div class=\'jpoker_options\'><a href=\'javascript://\'>{options_label}</a></div>',
            dialog: '<div id=\'jpokerOptionsDialog\' class=\'jpoker_options_dialog jpoker_jquery_ui\'>{auto_muck}</div>'
        }
    };

    //
    // muck (table plugin helper)
    //

    jpoker.plugins.muck = {
        AUTO_MUCK_WIN: 1,
        AUTO_MUCK_LOSE: 2,
        templates : {
            muck_accept: '<div class=\'jpoker_muck jpoker_muck_accept\'><a href=\'javascript://\'>{muck_accept_label}</a></div>',
            muck_deny: '<div class=\'jpoker_muck jpoker_muck_deny\'><a href=\'javascript://\'>{muck_deny_label}</a></div>',
            auto_muck: '<div class=\'jpoker_auto_muck\'><div class=\'jpoker_auto_muck_win\'><input type=\'checkbox\' name=\'auto_muck_win\' id=\'auto_muck_win{id}\'></input><label for=\'auto_muck_win{id}\' title=\'{auto_muck_win_title}\'>{auto_muck_win_label}</label></div><div class=\'jpoker_auto_muck_lose\'><input type=\'checkbox\' name=\'auto_muck_lose\' id=\'auto_muck_lose{id}\'></input><label for=\'auto_muck_lose{id}\' title=\'{auto_muck_lose_title}\'>{auto_muck_lose_label}</label></div></div>'
        },
        muckRequest: function(server, packet, id) {
            if ($.inArray(server.serial, packet.muckable_serials) != -1) {
                $('#muck_accept' + id).show();
                $('#muck_deny' + id).show();
            }
        },

        muckRequestTimeout: function(id) {
            $('#muck_accept' + id).hide();
            $('#muck_deny' + id).hide();
        },
        sendAutoMuck: function(server, game_id, id) {
            var auto_muck = 0;
            if ($('#auto_muck_win' + id).is(':checked')) {
                auto_muck |= jpoker.plugins.muck.AUTO_MUCK_WIN;
            }
            if ($('#auto_muck_lose' + id).is(':checked')) {
                auto_muck |= jpoker.plugins.muck.AUTO_MUCK_LOSE;
            }
            server.sendPacket({type: 'PacketPokerAutoMuck', serial: server.serial, game_id: game_id, auto_muck: auto_muck});
            server.preferences.extend({auto_muck_win: $('#auto_muck_win' + id).is(':checked'), auto_muck_lose: $('#auto_muck_lose' + id).is(':checked')});
        }
    };
