    //
    // table
    //
    jpoker.plugins.table = function(url, game_id, name, options) {

        var opts = $.extend({}, jpoker.plugins.table.defaults, options);
        var server = jpoker.url2server({ url: url });

        game_id = parseInt(game_id, 10);

        return this.each(function() {
                var $this = $(this);

                var id = jpoker.uid();

                var placeholder = jpoker.plugins.table.templates.placeholder.supplant({ 'name': name });
                $this.append('<span class=\'jpoker_widget jpoker_table\' id=\'' + id + '\'><div class=\'jpoker_connecting\'><div class=\'jpoker_connecting_message\'>' + placeholder + '</div><div class=\'jpoker_connecting_image\'></div></div></span>');

                if(game_id in server.tables) {
                    var element = document.getElementById(id);
                    jpoker.plugins.table.create($(element), id, server, game_id);
                    jpoker.plugins.table.callback.display_done(element);
                }

                return this;
            });
    };

    jpoker.plugins.table.defaults = $.extend({
        }, jpoker.defaults);

    jpoker.plugins.table.create = function(element, id, server, game_id) {
        var game_fixed, game_window;
        if(jpoker.verbose > 0) {
            jpoker.message('plugins.table.create ' + id + ' game: ' + game_id);
        }
        if(game_id in server.tables) {
            var url = server.url;
            var table = server.tables[game_id];
            element.html(this.templates.room.supplant({ id: id }));
            game_fixed = $('#game_fixed' + id);
            game_window = $('#game_window' + id);
            jpoker.plugins.table.seats(id, server, table);
            jpoker.plugins.table.dealer(id, table, table.dealer);
            jpoker.plugins.cards.update(table.board, 'board', id);
            $('#pots' + id).addClass('jpoker_pots jpoker_pots0').html(jpoker.plugins.table.templates.pots.supplant({
                        chips: jpoker.plugins.chips.template
                            }));
            for(var pot = 0; pot < table.pots.length; pot++) {
                jpoker.plugins.chips.update(table.pots[pot], '#pots' + id + ' .jpoker_pot' + pot );
            }

            for(var winner = 0; winner < 2; winner++) {
                $('#winner' + winner + id).hide();
            }
            $('#rebuy' + id).hide();
            $('#sitout' + id).hide();
            $('#sitin' + id).hide();
            $('#options' + id).hide();
            $('#muck_accept' + id).hide();
            $('#muck_deny' + id).hide();
            $('#quit' + id).click(function() {
                    var server = jpoker.getServer(url);
                    var table = jpoker.getTable(url, game_id);
                    if(server) {
                        server.tableQuit(game_id);
                        server.queueRunning(function(server) {
                                table.handler(server, game_id, { type: 'PacketPokerTableDestroy',
                                            game_id: game_id });
                            });
                    }
                }).hover(function(){
                        $(this).addClass('hover');
                    },function(){
                        $(this).removeClass('hover');
                    }).html('<div class=\'jpoker_quit\'><a href=\'javascript://\'>' + _("Exit") + '</a></div>');
            game_fixed.append(this.templates.chat.supplant({
                        chat_history_player_label: _("chat"),
                        chat_history_dealer_label: _("dealer")
                            }));
            $('.jpoker_chat_input', game_window).hide();
            jpoker.plugins.playerSelf.hide(id);
            for(var serial in table.serial2player) {
                jpoker.plugins.player.create(table, table.serial2player[serial], id);
            }
            jpoker.plugins.table.position(id, table, table.serial_in_position);
            jpoker.plugins.table.timeout(id, table, table.serial_in_position, 0.0);
            //
            // sound
            //
            jpoker.plugins.table.soundCreate('sound_control' + id, server);

            $('#table_info' + id).html(this.templates.table_info.supplant($.extend(table, {
                            name_label: _("Name: "),
                            variant_label: _("Variant: "),
                            betting_structure_label: _("Structure: "),
                            seats_label: _("Seats: "),
                            percent_flop_label: _("% Flop"),
                            player_timeout_label: _("Player timeout: "),
                            muck_timeout_label: _("Muck timeout: ")
                        })));

            $('.jpoker_table', element).append(jpoker.copyright_text);
            $('#powered_by' + id).addClass('jpoker_powered_by').html(this.templates.powered_by);


            for (var i = 0; i < 10; i+=1) {
                var sit_seat = $('#sit_seat' + i + id).addClass('jpoker_sit_seat');
                $('<div class=\'jpoker_sit_seat_progress\'>').appendTo(sit_seat);
            }

            // it does not matter to register twice as long as the same key is used
            // because the second registration will override the first
            table.registerUpdate(this.update, id, 'table update' + id);
            table.registerDestroy(this.destroy, id, 'table destroy' + id);
            table.registerReinit(this.reinit, id, 'table reinit' + id);
        }
    };

     jpoker.plugins.table.soundCreate = function(id, server) {
         if($('#jpokerSound').size() === 0) {
             $('body').append('<div id=\'jpokerSound\' />');
         }
         if($('#jpokerSoundAction').size() === 0) {
             $('body').append('<div id=\'jpokerSoundAction\' />');
         }
         if($('#jpokerSoundTable').size() === 0) {
             $('body').append('<div id=\'jpokerSoundTable\' />');
         }
         var element = $('#' + id);
         element.addClass('jpoker_sound_control');
         var url = server.url;
         function update_css(element, server) {
             if(server.preferences.sound) {
                 element.html(jpoker.plugins.table.templates.sound.supplant({ sound: _("Sound On") }));
                 element.removeClass('jpoker_sound_off');
             } else {
                 element.html(jpoker.plugins.table.templates.sound.supplant({ sound: _("Sound Off") }));
                 element.addClass('jpoker_sound_off');
             }
         }
         update_css(element, server);
         element.click(
             function() {
                 var server = jpoker.getServer(url);
                 server.preferences.sound = !server.preferences.sound;
                 server.preferences.save();
                 update_css($(this), server);
             });
     };

    jpoker.plugins.table.seats = function(id, server, table) {
        for(var seat = 0; seat < table.seats.length; seat++) {
            jpoker.plugins.player.seat(seat, id, server, table);
        }
    };

    jpoker.plugins.table.dealer = function(id, table, dealer) {
        for(var seat = 0; seat < table.seats.length; seat++) {
            if(seat == dealer) {
                $('#dealer' + seat + id).show();
            } else {
                $('#dealer' + seat + id).hide();
            }
        }
    };

    jpoker.plugins.table.position = function(id, table, serial_in_position) {
        var in_position = table.serial2player[serial_in_position];
        for(var seat = 0; seat < table.seats.length; seat++) {
            var seat_element = $('#player_seat' + seat + id);
            if(in_position && in_position.sit_out === false && in_position.seat == seat) {
                if(!seat_element.hasClass('jpoker_position')) {
                    seat_element.addClass('jpoker_position');
                }
            } else {
                if(seat_element.hasClass('jpoker_position')) {
                    seat_element.removeClass('jpoker_position');
                }
            }
        }
    };

    jpoker.plugins.table.timeout = function(id, table, serial_in_position, ratio) {
        var in_position = table.serial2player[serial_in_position];
        for(var seat = 0; seat < table.seats.length; seat++) {
            var timeout_element = $('#player_seat' + seat + '_timeout' + id);
            var width = parseFloat(timeout_element.css('width'));
            if(in_position && in_position.sit_out === false && in_position.seat == seat) {
                $('.jpoker_timeout_progress', timeout_element).stop().css({width: ratio*width+'px'}).show().animate({width: '0'}, {duration: ratio*table.player_timeout*1000, queue: false});
                timeout_element.attr('pcur', ratio*100).show();
            } else {
                timeout_element.hide();
            }
            timeout_element.find('.text').hide();
        }
    };

    jpoker.plugins.table.serial = function(id, server, table, serial) {
        if(serial in table.serial2player) {
            //
            // if the player who logs in is already sit at the table, recreate all
            //
            this.destroy(table, null, id);
            var element = document.getElementById(id);
            if(element) {
                this.create($(element), id, server, table.id);
            }
        } else {
            this.seats(id, server, table);
        }
    };

    jpoker.plugins.table.update = function(table, what, packet, id) {
        var element = document.getElementById(id);
        var server = jpoker.getServer(table.url);
        var url = table.url;
        var game_id = packet.game_id;
        var serial = packet.serial;
        var game_window = $('#game_window' + id);
        if(element && server) {
            switch(packet.type) {

            case 'PacketSerial':
                jpoker.plugins.table.serial(id, server, table, packet.serial);
                break;

            case 'PacketLogout':
                jpoker.plugins.table.seats(id, server, table);
                break;

            case 'PacketPokerPlayerArrive':
                jpoker.plugins.player.create(table, packet, id);
                if(server.loggedIn() && packet.serial == server.serial) {
                    $('.jpoker_sit_seat', game_window).hide();
                }
                break;

            case 'PacketPokerPlayerLeave':
                jpoker.plugins.player.leave(table, packet, id);
                if(server.loggedIn() && packet.serial == server.serial) {
                    jpoker.plugins.table.seats(id, server, table);
                }
                break;

            case 'PacketPokerUserInfo':
                jpoker.plugins.playerSelf.rebuy(url, game_id, serial, id);
                break;

            case 'PacketPokerState':
                jpoker.plugins.muck.muckRequestTimeout(id);
                break;

            case 'PacketPokerBoardCards':
                if (packet.cards.length > 0) {
                    jpoker.plugins.cards.update(table.board, 'board', id);
                    jpoker.plugins.table.callback.animation.deal_card(table, id, packet);
                    jpoker.plugins.table.callback.sound.deal_card(server);
                } else {
                    jpoker.plugins.cards.update(table.board, 'board', id);
                    jpoker.plugins.table.callback.animation.best_card_reset(table, id);
                }
                break;

            case 'PacketPokerBestCards':
                jpoker.plugins.table.callback.animation.best_card(table, id, packet);
                break;

            case 'PacketPokerDealCards':
                jpoker.plugins.table.callback.sound.deal_card(server);
                break;

            case 'PacketPokerPotChips':
                var count = 0;
                for(var pot = 0; pot < table.pots.length; pot+=1) {
                    if (table.pots[pot] !== 0) {
                        count += 1;
                    }
                }
                $('#pots' + id).removeClass().addClass('jpoker_ptable_pots jpoker_pots jpoker_pots'+count);
                jpoker.plugins.chips.update(table.pots[packet.index], '#pots' + id + ' .jpoker_pot' + packet.index);
                break;

            case 'PacketPokerChipsPotReset':
                $('#pots' + id).removeClass().addClass('jpoker_ptable_pots jpoker_pots jpoker_pots0');
                for(pot = 0; pot < table.pots.length; pot+=1) {
                    $('#pots' + id + ' .jpoker_pot' + pot).hide().children('.jpoker_chips_amount').text('');
                }
                break;

            case 'PacketPokerDealer':
                jpoker.plugins.table.dealer(id, table, packet.dealer);
                break;

            case 'PacketPokerPosition':
                jpoker.plugins.table.position(id, table, packet.serial);
                jpoker.plugins.table.timeout(id, table, packet.serial, 1.0);
                break;

            case 'PacketPokerTimeoutWarning':
                jpoker.plugins.table.timeout(id, table, packet.serial, 0.5);
                break;

            case 'PacketPokerTimeoutNotice':
                jpoker.plugins.table.timeout(id, table, packet.serial, 0.0);
                break;

            case 'PacketPokerChat':
                var filtered_packet = jpoker.plugins.table.callback.chat_filter(table, packet);
                if(filtered_packet !== null) {
                    var lines = filtered_packet.message.replace(/\n$/, '').split('\n');
                    var chat;
                    var prefix = '';
                    if (filtered_packet.serial === 0) {
                        chat = $('.jpoker_chat_history_dealer', game_window);
                        prefix = _("Dealer") + ': ';
                    }
                    else {
                        chat = $('.jpoker_chat_history_player', game_window);
                        if(filtered_packet.serial in table.serial2player) {
                            prefix = table.serial2player[filtered_packet.serial].name + ': ';
                        }
                    }
                    for(var line = 0; line < lines.length; line++) {
                        var message = lines[line];
                        if (filtered_packet.serial === 0) {
                            message = message.replace(/^Dealer: /, '');
                        }
                        var chat_line = $('<div class=\'jpoker_chat_line\'>').appendTo(chat);
                        var chat_prefix = $('<span class=\'jpoker_chat_prefix\'></span>').appendTo(chat_line).text(prefix);
                        var chat_message = $('<span class=\'jpoker_chat_message\'></span>').appendTo(chat_line).text(message);
                    }
                    chat.attr('scrollTop', chat.attr('scrollHeight') || 0);
                jpoker.plugins.table.callback.chat_changed(chat);
                }
                break;

            case 'PacketPokerMuckRequest':
                jpoker.plugins.muck.muckRequest(server, packet, id);
                break;

            case 'PacketPokerStart':
                var table_info = $('#table_info' + id);
                if (table.is_tourney) {
                    $('.jpoker_table_info_level', table_info).html(table.level);
                }
                jpoker.plugins.table.callback.hand_start(packet);
                break;

            case 'PacketPokerTableTourneyBreakBegin':
                jpoker.plugins.table.callback.tourney_break(packet);
                break;

            case 'PacketPokerTableTourneyBreakDone':
                jpoker.plugins.table.callback.tourney_resume(packet);
                break;

            case 'PacketPokerTourneyRank':
                jpoker.plugins.table.rank(table, packet, id);
                break;

            case 'PacketPokerShowdown':
                if(packet.showdown_stack && packet.showdown_stack.length > 0) {
                    var serial2delta = packet.showdown_stack[0].serial2delta;
                    if(serial2delta && server.serial in serial2delta && serial2delta[server.serial] > 0) {
                        jpoker.plugins.table.callback.sound.self_win(server);
                    }
                }
                break;
            }

            return true;
        } else {
            return false;
        }
    };

    jpoker.plugins.table.destroy = function(table, what, packet, id) {
        // it is enough to destroy the DOM elements, even for players
        if(jpoker.verbose) {
            jpoker.message('plugins.table.destroy ' + id);
        }
        jpoker.plugins.table.callback.quit(table, packet);
        $('#game_window' + id).remove();
        if (table.tourney_rank !== undefined) {
            jpoker.plugins.table.callback.tourney_end(table);
        }
        return false;
    };

    jpoker.plugins.table.reinit = function(table, what, packet, id) {
        jpoker.plugins.table.destroy(table, 'destroy', null, id);
        var element = document.getElementById(id);
        var server = jpoker.getServer(table.url);
        if(element && server) {
            jpoker.plugins.table.create($(element), id, server, table.id);
            return true;
        } else {
            return false;
        }
    };

    jpoker.plugins.table.rank = function(table, packet, id) {
        var rankDialog = $('#jpokerRankDialog');
        if(rankDialog.size() === 0) {
            $('body').append('<div id=\'jpokerRankDialog\' class=\'jpoker_jquery_ui\' />');
            rankDialog = $('#jpokerRankDialog');
            if(jpoker.verbose > 0) {
                jpoker.message(jpoker.plugins.table.rank.options);
            }
            rankDialog.dialog(jpoker.plugins.table.rank.options);
        }
        var rank = _(jpoker.plugins.table.templates.rank); // necessary because i18n is inactive when the template is first read
        packet.money = jpoker.chips.LONG(packet.money/100.0);
        rankDialog.html(rank.supplant(packet)).dialog('open');
        var url = table.url;
        $('#jpokerRankDialog .jpoker_tournament_details').click(function() {
                var server = jpoker.getServer(url);
                if(server) {
                    server.rankClick(server, packet.serial);
                }});
    };

    jpoker.plugins.table.rank.options = { width: 'none', height: 'none', autoOpen: false, resizable: false, dialogClass: 'jpoker_dialog_rank'};

    jpoker.plugins.table.templates = {
        room: 'expected to be overriden by mockup.js but was not',
        tourney_break: '<div>{label}</div><div>{date}</div>',
        powered_by: '<a title=\'Powered by jpoker\' href=\'javascript://\' onclick=\'$.jpoker.copyright()\' >Powered by jpoker</a>',
        chat: '<div class=\'jpoker_chat_input\'><input value=\'chat here\' type=\'text\' width=\'100%\' /></div><div class=\'jpoker_chat_history_player_box\'><div class=\'jpoker_chat_history_player_heading\'>{chat_history_player_label}</div><div class=\'jpoker_chat_history_player\'></div></div><div class=\'jpoker_chat_history_dealer_box\'><div class=\'jpoker_chat_history_dealer_heading\'>{chat_history_dealer_label}</div><div class=\'jpoker_chat_history_dealer\'></div></div>',
        placeholder: _("connecting to table {name}"),
        table_info: '<div class=\'jpoker_table_info_name\'><span class=\'jpoker_table_info_name_label\'>{name_label}</span>{name}</div><div class=\'jpoker_table_info_variant\'><span class=\'jpoker_table_info_variant_label\'>{variant_label}</span>{variant}</div><div class=\'jpoker_table_info_blind\'><span class=\'jpoker_table_info_blind_label\'>{betting_structure_label}</span>{betting_structure}</div><div class=\'jpoker_table_info_seats\'><span class=\'jpoker_table_info_seats_label\'>{seats_label}</span>{max_players}</div><div class=\'jpoker_table_info_flop\'>{percent_flop}<span class=\'jpoker_table_info_flop_label\'>{percent_flop_label}</span></div><div class=\'jpoker_table_info_player_timeout\'><span class=\'jpoker_table_info_player_timeout_label\'>{player_timeout_label}</span>{player_timeout}</div><div class=\'jpoker_table_info_muck_timeout\'><span class=\'jpoker_table_info_muck_timeout_label\'>{muck_timeout_label}</span>{muck_timeout}</div><div class=\'jpoker_table_info_level\'></div>',
        date: '',
        pots: '<div class=\'jpoker_pots_align\'><span class=\'jpoker_pot jpoker_pot9\'>{chips}</span><span class=\'jpoker_pot jpoker_pot7\'>{chips}</span><span class=\'jpoker_pot jpoker_pot5\'>{chips}</span><span class=\'jpoker_pot jpoker_pot3\'>{chips}</span><span class=\'jpoker_pot jpoker_pot1\'>{chips}</span><span class=\'jpoker_pot jpoker_pot0\'>{chips}</span><span class=\'jpoker_pot jpoker_pot2\'>{chips}</span><span class=\'jpoker_pot jpoker_pot4\'>{chips}</span><span class=\'jpoker_pot jpoker_pot6\'>{chips}</span><span class=\'jpoker_pot jpoker_pot8\'>{chips}</span></div>',
        rank: _("Won {money} chips, {rank} out of {players}. Click <span class=\'jpoker_tournament_details\'>here</span> to see the tournament details."),
        sound: "{sound}"
    };

    jpoker.plugins.table.callback = {
        hand_start: function(packet) {
        },
        tourney_break: function(packet) {
            var t = jpoker.plugins.table.templates;
            var date = new Date(packet.resume_time*1000);
            var date_string;
            if (t.date && (t.date !== '')) {
                date_string = $.strftime(t.date, date);
            } else {
                date_string = date.toLocaleString();
            }
            jpoker.dialog(t.tourney_break.supplant({label: _("This tournament is on break, and will resume at:"),
                            date: date_string}));
        },
        tourney_resume: function(packet) {
            $('#jpokerDialog').dialog('close');
        },
        tourney_end: function(table) {
            var server = jpoker.getServer(table.url);
            server.tourneyRowClick(server, {name: '', game_id: table.tourney_serial});
        },
        quit: function(table, packet) {
        },
        display_done: function(element) {
        },
        chat_changed: function(element) {
        },
        chat_filter: function(table, packet) {
            return packet;
        },
        sound: {
            deal_card: function(server) {
                if(server.preferences.sound) {
                    $('#jpokerSoundTable').html('<' + jpoker.sound + ' src=\'' + jpoker.sound_directory + 'deal_card.swf\' />');
                }
            },
            self_win: function(server) {
                if(server.preferences.sound) {
                    $('#jpokerSoundTable').html('<' + jpoker.sound + ' src=\'' + jpoker.sound_directory + 'player_win.swf\' />');
                }
            }
        },
        animation: {
            deal_card: function(table, id, packet, duration_arg, callback) {
                var duration = duration_arg ? duration_arg : 500;
                var game_window = $('#game_window' + id);
                var dealer_seat = table.dealer;
                var board_cards = {3: $('.jpoker_ptable_board0, .jpoker_ptable_board1, .jpoker_ptable_board2', game_window),
                                   4: $('.jpoker_ptable_board3', game_window),
                                   5: $('.jpoker_ptable_board4', game_window)}[packet.cards.length];
                if ((dealer_seat != -1) && board_cards) {
                    board_cards.each(function() {
                            var dealer = $('#dealer' + dealer_seat + id);
                            var dealerSeatOffset = $('#seat'+ dealer_seat + id).getOffset();
                            var dealerPosition = $('#dealer' + dealer_seat + id).getPosition();
                            var card = $(this);
                            var cardPosition = card.getPosition();
                            var gameFixedOffset = $('#game_fixed' + id).getOffset();
                            dealerPosition.top += dealerSeatOffset.top;
                            dealerPosition.left += dealerSeatOffset.left;
                            dealerPosition.top -= gameFixedOffset.top;
                            dealerPosition.left -= gameFixedOffset.left;
                            dealerPosition.top -= card.height()/2.0;
                            dealerPosition.left -= card.width()/2.0;
                            dealerPosition.top += dealer.height()/2.0;
                            dealerPosition.left += dealer.width()/2.0;
                            card.css({top: dealerPosition.top, left: dealerPosition.left, opacity: 0.0}).animate({top: cardPosition.top, left: cardPosition.left, opacity: 1.0}, duration, callback);
                        });
                }
            },
            best_card: function(table, id, packet, duration_arg, callback) {
                var duration = duration_arg ? duration_arg : 500;
                var game_window = $('#game_window' + id);
                var player = table.serial2player[packet.serial];
                var cards_element = $('.jpoker_ptable_board0, .jpoker_ptable_board1, .jpoker_ptable_board2, .jpoker_ptable_board3, .jpoker_ptable_board4, #card_seat'+player.seat+id+' .jpoker_card', game_window);
                var cards = packet.board.concat(packet.cards);
                if (jpoker.plugins.table.callback.animation.best_card.positions === undefined) {
                    jpoker.plugins.table.callback.animation.best_card.positions = {
                    };
                }
                cards_element.each(function() {
                        if (jpoker.plugins.table.callback.animation.best_card.positions[$(this).attr('id')] === undefined) {
                            jpoker.plugins.table.callback.animation.best_card.positions[$(this).attr('id')] = $(this).getPosition();
                        }
                    });

                cards_element.each(function(i) {
                        if ($(this).hasClass('jpoker_best_card') === false) {
                            if (jQuery.inArray(cards[i], packet.bestcards) != -1) {
                                $(this).addClass('jpoker_best_card').animate({top: '+=8px'}, duration, callback);
                            } else {
                                $(this).animate({opacity: 0.5}, duration, callback);
                            }
                        }
                    });
            },
            best_card_reset: function(table, id) {
                var game_window = $('#game_window' + id);
                if (jpoker.plugins.table.callback.animation.best_card.positions !== undefined) {
                    $.each(jpoker.plugins.table.callback.animation.best_card.positions, function(id, position) {
                            $('#'+id).removeClass('jpoker_best_card').css(position).css({opacity: 1.0});
                        });
                }
            }
        }
    };

    //
    // player (table plugin helper)
    //
    jpoker.plugins.player = {
        create: function(table, packet, id) {
            var url = table.url;
            var game_id = table.id;
            var serial = packet.serial;
            var player = table.serial2player[serial];
            var seat = player.seat;
            var server = jpoker.getServer(url);
            jpoker.plugins.player.seat(seat, id, server, table);
            jpoker.plugins.cards.update_value(player.cards, 'card_seat' + player.seat, id);
            $('#player_seat' + seat + '_bet' + id).addClass('jpoker_bet').html(jpoker.plugins.chips.template);
            $('#player_seat' + seat  + '_money' + id).addClass('jpoker_money').html(jpoker.plugins.chips.template);
            $('#player_seat' + seat  + '_action' + id).addClass('jpoker_action');
            var avatar_element = $('#player_seat' + seat  + '_avatar' + id);
            if ((packet.avatar_url !== undefined) && (packet.avatar_url != 'random')) {
                avatar_element.removeClass().addClass('jpoker_avatar jpoker_ptable_player_seat' + seat + '_avatar ');
                this.avatar.update(player.name, packet.avatar_url, avatar_element);
            } else {
                var avatar = (seat + 1) + (10 * game_id % 2);
                avatar_element.removeClass().addClass('jpoker_avatar jpoker_ptable_player_seat' + seat + '_avatar jpoker_avatar_default_' + avatar);
                avatar_element.empty();
                var avatar_url = server.urls.avatar+'/'+serial;
                server.ajax({url: avatar_url,
                        type: 'GET',
                        global: false,
                        success: function(data, status) {
                        jpoker.plugins.player.avatar.update(player.name, avatar_url, avatar_element);
                        }
                });
            }
            avatar_element.show();
            var seat_element = $('#player_seat' + seat + id);
            seat_element.hover(function() {
                    jpoker.plugins.player.callback.seat_hover_enter(player, id);
                }, function() {
                    jpoker.plugins.player.callback.seat_hover_leave(player, id);
                }).click(function() {
                        jpoker.plugins.player.callback.seat_click(player, id);
                    });
            var timeout_element = $('#player_seat' + seat  + '_timeout' + id).removeClass().addClass('jpoker_timeout jpoker_ptable_player_seat' + seat + '_timeout').html('<div class=\'jpoker_timeout_progress\'></div>');

            jpoker.plugins.player.chips(player, id);
            var name = $('#player_seat' + seat + '_name' + id);
            name.addClass('jpoker_name');
            name.text(player.name);
            if(server.serial == serial) {
                jpoker.plugins.playerSelf.create(table, packet, id);
            }
            if(!player.sit_out && !player.auto) {
                jpoker.plugins.player.sit(player, id);
            } else {
                jpoker.plugins.player.sitOut(player, id);
            }
            this.callback.sound.arrive(server);
            player.registerUpdate(this.update, id, 'update' + id);
            player.registerDestroy(this.destroy, id, 'destroy' + id);
            var stats_element = $('#player_seat' + seat  + '_stats' + id).removeClass().addClass('jpoker_player_stats jpoker_ptable_player_seat' + seat + '_stats');
            var sidepot_element = $('#player_seat' + seat  + '_sidepot' + id).removeClass().addClass('jpoker_player_sidepot jpoker_ptable_player_seat' + seat + '_sidepot').hide();

            $('#player_seat' + seat  + '_hole' + id).addClass('jpoker_player_hole');

            // at the end of player.create: call player_arrive callback
            $('#seat' + seat + id).addClass('jpoker_seat jpoker_seat'+seat);
            seat_element.addClass('jpoker_player_seat jpoker_player_seat'+seat);
            this.callback.player_arrive(seat_element.get(0), serial);
            this.callback.display_done(seat_element.get(0), player);
        },

        leave: function(player, packet, id) {
            var server = jpoker.getServer(player.url);
            if(server.serial == packet.serial) {
                jpoker.plugins.playerSelf.leave(player, packet, id);
            }
        },

        update: function(player, what, packet, id) {
            var server = jpoker.getServer(player.url);

            switch(packet.type) {

            case 'PacketPokerSit':
            jpoker.plugins.player.sit(player, id);
            break;

            case 'PacketPokerSitOut':
            jpoker.plugins.player.sitOut(player, id);
            break;

            case 'PacketPokerAutoFold':
            jpoker.plugins.player.sitOut(player, id);
            break;

            case 'PacketPokerPlayerCards':
            var update = function() {
                jpoker.plugins.cards.update_value(player.cards, 'card_seat' + player.seat, id);
            };
            $('#seat' + player.seat + id).addClass('jpoker_player_dealt');
            if(player.cards.dealt === true) {
                jpoker.plugins.player.callback.animation.deal_card(player, id, undefined, update);
            } else {
                update();
            }
            break;

            case 'PacketPokerBestCards':
            break;

            case 'PacketPokerFold':
            $('#seat' + player.seat + id).removeClass('jpoker_player_dealt');
            jpoker.plugins.player.action(player, id);
            jpoker.plugins.player.callback.sound.fold(server);
            break;

            case 'PacketPokerCheck':
            jpoker.plugins.player.action(player, id);
            jpoker.plugins.player.callback.sound.check(server);
            break;

            case 'PacketPokerCall':
            jpoker.plugins.player.action(player, id);
            jpoker.plugins.player.callback.sound.call(server);
            break;

            case 'PacketPokerRaise':
            jpoker.plugins.player.action(player, id);
            jpoker.plugins.player.callback.sound.raise(server);
            break;

            case 'PacketPokerStart':
            $('#seat' + player.seat + id).removeClass('jpoker_player_dealt');
            jpoker.plugins.player.action(player, id);
            jpoker.plugins.player.handStart(player, id);
            $('#player_seat' + player.seat + id).removeClass('jpoker_player_allin');
            break;

            case 'PacketPokerBeginRound':
            jpoker.plugins.player.beginRound(player, id);
            break;

            case 'PacketPokerHighestBetIncrease':
            jpoker.plugins.player.highestBetIncrease(player, id);
            break;

            case 'PacketPokerInGame':
            jpoker.plugins.player.inGame(player, id);
            break;

            case 'PacketPokerPlayerHandStrength':
            jpoker.plugins.player.handStrength(player, packet.hand, id);
            break;

            case 'PacketPokerTableMove':
            jpoker.plugins.player.tableMove(player, packet, id);
            break;

            case 'PacketPokerEndRound':
            jpoker.plugins.player.action(player, id);
            break;

            case 'PacketPokerPlayerChips':
            jpoker.plugins.player.chips(player, id);
            if (player.all_in === true) {
                $('#player_seat' + player.seat + id).addClass('jpoker_player_allin');
            }
            break;

            case 'PacketPokerChipsBet2Pot':
            jpoker.plugins.player.callback.animation.bet2pot(player, id, packet);
            break;

            case 'PacketPokerChipsPlayer2Bet':
            jpoker.plugins.player.callback.animation.money2bet(player, id);
            break;

            case 'PacketPokerChipsPot2Player':
            jpoker.plugins.player.callback.animation.pot2money(player, id, packet);
            break;

            case 'PacketPokerTimeoutWarning':
            case 'PacketPokerTimeoutNotice':
            if(server.serial == packet.serial) {
                jpoker.plugins.playerSelf.timeout(player, id, packet);
            }
            break;

            case 'PacketPokerSelfInPosition':
            jpoker.plugins.playerSelf.inPosition(player, id);
            break;

            case 'PacketPokerSelfLostPosition':
            jpoker.plugins.playerSelf.lostPosition(player, packet, id);
            break;

            case 'PacketPokerPotChips':
            jpoker.plugins.player.side_pot.update(player, id);
            break;

            case 'PacketPokerChipsPotReset':
            jpoker.plugins.player.side_pot.update(player, id);
            break;

            case 'PacketPokerPlayerStats':
            jpoker.plugins.player.stats.update(player, packet, id);
            break;
            }
            return true;
        },

        handStart: function(player, id) {
            if(jpoker.getServer(player.url).serial == player.serial) {
                jpoker.plugins.playerSelf.handStart(player, id);
            }
        },

        beginRound: function(player, id) {
            if(jpoker.getServer(player.url).serial == player.serial) {
                jpoker.plugins.playerSelf.beginRound(player, id);
            }
        },

        highestBetIncrease: function(player, id) {
            if(jpoker.getServer(player.url).serial == player.serial) {
                jpoker.plugins.playerSelf.highestBetIncrease(player, id);
            }
        },

        inGame: function(player, id) {
            if(jpoker.getServer(player.url).serial == player.serial) {
                jpoker.plugins.playerSelf.inGame(player, id);
            }
        },

        handStrength: function(player, hand, id) {
            if(jpoker.getServer(player.url).serial == player.serial) {
                jpoker.plugins.playerSelf.handStrength(player, hand, id);
            }
        },

        tableMove: function(player, packet, id) {
            if(jpoker.getServer(player.url).serial == player.serial) {
                jpoker.plugins.playerSelf.tableMove(player, packet, id);
            }
        },

        sit: function(player, id) {
            var name = $('#player_seat' + player.seat + id);
            if(name.hasClass('jpoker_sit_out')) {
                name.removeClass('jpoker_sit_out');
            }
            if(jpoker.getServer(player.url).serial == player.serial) {
                jpoker.plugins.playerSelf.sit(player, id);
            }
        },

        sitOut: function(player, id) {
            var name = $('#player_seat' + player.seat + id);
            if(!name.hasClass('jpoker_sit_out')) {
                name.addClass('jpoker_sit_out');
            }
            if(jpoker.getServer(player.url).serial == player.serial) {
                jpoker.plugins.playerSelf.sitOut(player, id);
            }
        },

        chips: function(player, id) {
            jpoker.plugins.chips.update(player.money, '#player_seat' + player.seat + '_money' + id);
            jpoker.plugins.chips.update(player.bet, '#player_seat' + player.seat + '_bet' + id);
            if(jpoker.getServer(player.url).serial == player.serial) {
                jpoker.plugins.playerSelf.chips(player, id);
            }
        },

        action: function(player, id) {
            $('#player_seat' + player.seat + '_action' + id).html(player.action);
        },

        seat: function(seat, id, server, table) {
            var selfPlayerLoggedButNotSit = server.loggedIn() && (table.serial2player[server.serial] === undefined);
            if(table.seats[seat] !== null) {
                $('#seat' + seat + id).show();
                $('#sit_seat' + seat + id).hide();
            } else {
                $('#seat' + seat + id).hide();
                if(selfPlayerLoggedButNotSit && ($.inArray(seat, table.seats_left) != -1)) {
                    var sit = $('#sit_seat' + seat + id);
                    sit.show();
                    sit.click(function() {
                            var server = jpoker.getServer(table.url);
                            if(server && server.loggedIn()) {
                                server.sendPacket({ 'type': 'PacketPokerSeat',
                                            'serial': server.serial,
                                            'game_id': table.id,
                                            'seat': seat
                                            });
                            }
                            $('#sit_seat' + seat + id).addClass('jpoker_self_get_seat');
                        });
                } else {
                    $('#sit_seat' + seat + id).hide();
                }
            }
        },

        side_pot: {
            template : '{label} {index}: {bet}',
            update: function(player, id) {
                if (player.side_pot !== undefined) {
                    var html = this.template.supplant($.extend(player.side_pot, {label: _("Pot")}));
                    $('#player_seat' + player.seat + '_sidepot' + id).html(html).show();
                } else {
                    $('#player_seat' + player.seat + '_sidepot' + id).html('').hide();
                }
            }
        },

        avatar: {
            template : '<img src=\'{url}\' alt=\'{name}\' />',
            update: function(name, url, element) {
                return element.html(this.template.supplant({ name: name, url: url }));
            }
        },

        stats: {
            templates: {
                rank: '<div class=\'jpoker_player_rank\'>{rank}</div>',
                level: '<div class=\'jpoker_player_level jpoker_player_level_{level}\'></div>'
            },
            getLevel: function(percentile) {
                var level;
                if (percentile >= 3) {
                    level = 'master';
                } else if (percentile >= 2) {
                    level = 'expert';
                } else if (percentile >= 1) {
                    level = 'pro';
                } else if (percentile >= 0) {
                    level = 'junior';
                }
                return level;
            },
            getHTML: function(packet) {
                var html = [];
                var t = this.templates;
                if ((packet.rank !== undefined) && (packet.rank !== null)) {
                    html.push(t.rank.supplant({rank: packet.rank}));
                }
                if ((packet.level !== undefined) && (packet.level !== null)) {
                    html.push(t.level.supplant({level: packet.level}));
                }
                return html.join('\n');
            },
            update: function(player, packet, id) {
                packet.level = this.getLevel(packet.percentile);
                $('#player_seat' + player.seat + '_stats' + id).html(this.getHTML(packet));
                $('#player_seat' + player.seat + id).addClass('jpoker_player_level_'+packet.level);
            }
        },

        destroy: function(player, what, dummy, id) {
            var server = jpoker.servers[player.url];
            var table = server.tables[player.game_id];
            jpoker.plugins.player.seat(player.seat, id, server, table);
            if(player.serial == server.serial) {
                jpoker.plugins.playerSelf.destroy(player, dummy, id);
            }
        },

        callback: {
            seat_hover_enter: function(player, id) {
                $('#player_seat' + player.seat  + id).addClass('jpoker_seat_hover');
            },
            seat_hover_leave: function(player, id) {
                $('#player_seat' + player.seat  + id).removeClass('jpoker_seat_hover');
            },
            seat_click: function(player, id) {
            },
            player_arrive: function(element, serial) {
            },
            display_done: function(element, player) {
            },
            sound: {
                arrive: function(server) {
                    if(server.preferences.sound) {
                        $('#jpokerSound').html('<' + jpoker.sound + ' src=\'' + jpoker.sound_directory + 'player_arrive.swf\' />');
                    }
                },
                call: function(server) {
                    if(server.preferences.sound) {
                        $('#jpokerSoundAction').html('<' + jpoker.sound + ' src=\'' + jpoker.sound_directory + 'player_call.swf\' />');
                    }
                },
                raise: function(server) {
                    if(server.preferences.sound) {
                        $('#jpokerSoundAction').html('<' + jpoker.sound + ' src=\'' + jpoker.sound_directory + 'player_bet.swf\' />');
                    }
                },
                fold: function(server) {
                    if(server.preferences.sound) {
                        $('#jpokerSoundAction').html('<' + jpoker.sound + ' src=\'' + jpoker.sound_directory + 'player_fold.swf\' />');
                    }
                },
                check: function(server) {
                    if(server.preferences.sound) {
                        $('#jpokerSoundAction').html('<' + jpoker.sound + ' src=\'' + jpoker.sound_directory + 'player_check.swf\' />');
                    }
                }

            },
            animation: {
                money2bet: function(player, id, duration_arg, callback) {
                    var duration = duration_arg ? duration_arg : 500;
                    var bet = $('#player_seat' + player.seat + '_bet' + id);
                    var bet_position = bet.getPosition();
                    var money = $('#player_seat' + player.seat + '_money' + id);
                    var money_position = money.getPosition();
                    var seat_offset = $('#seat'+ player.seat + id).getOffset();
                    var player_seat_offset = $('#player_seat'+ player.seat + id).getOffset();
                    money_position.top += player_seat_offset.top;
                    money_position.left += player_seat_offset.left;
                    money_position.top -= seat_offset.top;
                    money_position.left -= seat_offset.left;
                    bet.css({top: money_position.top, left: money_position.left, opacity: 0}).animate({top: bet_position.top, left: bet_position.left, opacity: 1.0}, duration, callback);
                },
                deal_card: function(player, id, duration_arg, callback) {
                    var duration = duration_arg ? duration_arg : 500;
                    var table = jpoker.getTable(player.url, player.game_id);
                    var playerSeatOffset = $('#seat'+ player.seat + id).getOffset();
                    var hole = $('#player_seat'+ player.seat + '_hole' + id);
                    var holePosition = hole.getPosition();
                    var dealer_seat = table.dealer;
                    var dealer, dealerSeatOffset, dealerPosition;
                    if (dealer_seat != -1) {
                        dealer = $('#dealer' + dealer_seat + id);
                        dealerSeatOffset = $('#seat'+ dealer_seat + id).getOffset();
                        dealerPosition = $('#dealer' + dealer_seat + id).getPosition();
                        dealerPosition.top += dealerSeatOffset.top;
                        dealerPosition.top -= playerSeatOffset.top;
                        dealerPosition.left += dealerSeatOffset.left;
                        dealerPosition.left -= playerSeatOffset.left;
                        dealerPosition.top -= hole.height()/2.0;
                        dealerPosition.left -= hole.width()/2.0;
                        dealerPosition.top += dealer.height()/2.0;
                        dealerPosition.left += dealer.width()/2.0;
                        hole.css({top: dealerPosition.top, left: dealerPosition.left, opacity: 0}).animate({top: holePosition.top, left: holePosition.left, opacity: 1.0}, duration, callback);
                    } else {
                        callback.call();
                    }
                },
                bet2pot: function(player, id, packet, duration_arg, callback) {
                    var duration = duration_arg ? duration_arg : 500;
                    var bet = $('#player_seat' + player.seat + '_bet' + id);
                    var chip = bet.clone().insertAfter(bet).addClass('jpoker_bet2pot_animation');
                    var pots_element = $('#pots' + id);
                    var pots_offset = pots_element.getOffset();
                    var player_seat_offset = $('#seat'+ player.seat + id).getOffset();
                    var pot_position = $('.jpoker_pot' + packet.pot).getPosition();
                    var remove_chip = function() {
                        chip.remove();
                    };
                    pot_position.left += pots_offset.left;
                    pot_position.left -= player_seat_offset.left;
                    pot_position.top += pots_offset.top;
                    pot_position.top -= player_seat_offset.top;
                    chip.css({opacity: 1}).animate({top: pot_position.top, left: pot_position.left, opacity: 0.0}, duration, callback ? function() {callback(remove_chip);} : remove_chip);
                },
                pot2money: function(player, id, packet, duration_arg, callback, hook) {
                    var duration = duration_arg ? duration_arg : 500;
                    var pots = $('#pots' + id);
                    var pots_offset = pots.getOffset();
                    var pot = $('.jpoker_pot' + packet.pot, pots).not('.jpoker_pot2money_animation');
                    var chip = pot.show().clone().insertAfter(pot).addClass('jpoker_pot2money_animation');
                    var money_element = $('#player_seat' + player.seat + '_money' + id);
                    var player_seat_offset = $('#player_seat'+ player.seat + id).getOffset();
                    var money_position = money_element.getPosition();
                    var pot_position = pot.getPosition();
                    var remove_chip = function() {
                        chip.remove();
                    };
                    pot.hide();
                    money_position.top += player_seat_offset.top;
                    money_position.left += player_seat_offset.left;
                    money_position.top -= pots_offset.top;
                    money_position.left -= pots_offset.left;
                    chip.css({opacity: 1, position: 'absolute', top: pot_position.top, left: pot_position.left});
                    if (hook !== undefined) {
                        hook(chip);
                    }
                    chip.animate({top: money_position.top, left: money_position.left, opacity: 0.0}, duration, callback ? function() {callback(remove_chip, chip);} : remove_chip);
                }
            }
        }
    };

    //
    // player self (table plugin helper)
    //
    jpoker.plugins.playerSelf = {
        create: function(table, packet, id) {
            var game_window = $('#game_window' + id);
            table.registerUpdate(this.updateTable, id, 'self update' + id);

            var url = table.url;
            var game_id = packet.game_id;
            var serial = packet.serial;
            var player = table.serial2player[serial];
            var names = [ 'check', 'call', 'raise', 'fold', 'allin', 'pot', 'halfpot', 'threequarterpot' ];
            var labels = [ _("check"), _("call") + ' <span class=\'jpoker_call_amount\'></span>', _("Raise"), _("fold"), _("all in"), _("pot"), _("1/2"), _("3/4") ];
            for(var i = 0; i < names.length; i++) {
                $('#' + names[i] + id).html(jpoker.plugins.playerSelf.templates.action.supplant({ action: labels[i] })).hover(function(){
                        $(this).addClass('hover');
                    },function(){
                        $(this).removeClass('hover');
                    });
            }
            //
            // rebuy
            //
            var rebuy = $('#rebuy' + id);
            rebuy.click(function() {
                    var server = jpoker.getServer(url);
                    if(server && server.loggedIn()) {
                        var element = jpoker.plugins.playerSelf.rebuy(url, game_id, serial, id);
                        if(element) {
                            element.dialog('open');
                            server.getUserInfo();
                        }
                    }
                });
            rebuy.hover(function(){
                        $(this).addClass('hover');
                    },function(){
                        $(this).removeClass('hover');
                    });
            rebuy.html(jpoker.plugins.playerSelf.templates.rebuy_button.supplant({ rebuy: _("Rebuy") }));
            rebuy.show();

            //
            // sitout
            //
            $('#sitout' + id).html(jpoker.plugins.playerSelf.templates.sitout.supplant({ sitout: _("sit out") }));
            $('#sitout' + id).click(function() {
                    var info = jpoker.getServerTablePlayer(url, table.id, serial);
                    if(info.server && info.server.loggedIn()) {
                        server.sendPacket({ 'type': 'PacketPokerSitOut',
                                    'game_id': table.id,
                                    'serial': serial });
                        $(this).hide();
                    }
                    return false;
                }).hover(function(){
                        $(this).addClass('hover');
                    },function(){
                        $(this).removeClass('hover');
                    });


            $('<div id=\'sitout_fold' + id  + '\'>').insertAfter('#sitout' + id).addClass('jpoker_ptable_sitout_fold').html(jpoker.plugins.playerSelf.templates.sitout.supplant({ sitout: _("fold/sit out") })).click(function() {
                var info = jpoker.getServerTablePlayer(url, table.id, serial);
                    if(info.server && info.server.loggedIn()) {
                        info.player.sit_out_fold_sent = true;
                        server.sendPacket({ 'type': 'PacketPokerSitOut',
                                    'game_id': table.id,
                                    'serial': serial });
                        server.sendPacket({ 'type': 'PacketPokerFold',
                                    'game_id': table.id,
                                    'serial': serial });
                        $(this).hide();
                    }
                    return false;
                }).hover(function(){
                        $(this).addClass('hover');
                    },function(){
                        $(this).removeClass('hover');
                    });

            //
            // sitin
            //
            $('#sitin' + id).html(jpoker.plugins.playerSelf.templates.sitin.supplant({ sitin: _("sit in") }));
            $('#sitin' + id).click(function() {
                    var server = jpoker.getServer(url);
                    if(server && server.loggedIn()) {
                        server.sendPacket({ 'type': 'PacketPokerAutoBlindAnte',
                                    'serial': serial,
                                    'game_id': game_id
                                    });
                        server.sendPacket({ 'type': 'PacketPokerSit',
                                    'game_id': table.id,
                                    'serial': serial });
                        $(this).hide();
                    }
                    return false;
                }).hover(function(){
                        $(this).addClass('hover');
                    },function(){
                        $(this).removeClass('hover');
                    }).show();

            //
            // chat
            //

            var chat = function() {
                var server = jpoker.getServer(url);
                if(server) {
                    var input = $('.jpoker_chat_input input', game_window);
                    var message = input.attr('value');
                    server.sendPacket({ 'type': 'PacketPokerChat',
                                'serial': server.serial,
                                'game_id': table.id,
                                'message': message
                                });
                    input.attr('value', '');
                }
            };
            $('.jpoker_chat_input', game_window).unbind('keypress').keypress(function(e) {
                    if(e.which == 13) {
                        chat();
                    }
                }).show();

            //
            // muck
            //
            $('#muck_accept' + id).html(jpoker.plugins.muck.templates.muck_accept.supplant({muck_accept_label: _("Muck")})).click(function() {
                    var server = jpoker.getServer(url);
                    server.sendPacket({type: 'PacketPokerMuckAccept', serial: server.serial, game_id: table.id});
                }).hover(function(){
                        $(this).addClass('hover');
                    },function(){
                        $(this).removeClass('hover');
                    });
            $('#muck_deny' + id).html(jpoker.plugins.muck.templates.muck_deny.supplant({muck_deny_label: _("Show")})).click(function() {
                    var server = jpoker.getServer(url);
                    server.sendPacket({type: 'PacketPokerMuckDeny', serial: server.serial, game_id: table.id});
                }).hover(function(){
                        $(this).addClass('hover');
                    },function(){
                        $(this).removeClass('hover');
                    });

            //
            // options
            //
            var options = $('#options' + id).html(jpoker.plugins.options.templates.button.supplant({options_label: _("Options")})).hover(function(){
                    $(this).addClass('hover');
                },function(){
                    $(this).removeClass('hover');
                }).show();
            options.after(jpoker.plugins.options.templates.dialog.supplant({
                        auto_muck: jpoker.plugins.muck.templates.auto_muck.supplant({
                                id: id,
                                    auto_muck_win_label: _("Muck winning"),
                                    auto_muck_win_title: _("Muck winning hands on showdown"),
                                    auto_muck_lose_label: _("Muck losing"),
                                    auto_muck_lose_title: _("Muck losing hands on showdown")})}));
            $('#jpokerOptionsDialog').dialog($.extend({}, jpoker.dialog_options, {title: _("Options")}));
            options.click(function() {
                    $('#jpokerOptionsDialog').dialog('open');
                });

            $('#auto_muck_win' + id).click(function() {
                    var server = jpoker.getServer(url);
                    jpoker.plugins.muck.sendAutoMuck(server, game_id, id);
                });
            $('#auto_muck_lose' + id).click(function() {
                    var server = jpoker.getServer(url);
                    jpoker.plugins.muck.sendAutoMuck(server, game_id, id);
                });

            var server = jpoker.getServer(url);
            $('#auto_muck_win' + id).each(function() { this.checked = server.preferences.auto_muck_win; });
            $('#auto_muck_lose' + id).each(function() { this.checked = server.preferences.auto_muck_lose; });
            jpoker.plugins.muck.sendAutoMuck(server, game_id, id);

            //
            // autoaction
            //
            var auto_action_element = $('#auto_action' + id).html(jpoker.plugins.playerSelf.templates.auto_action.supplant({
                        id: id,
                        auto_check_fold_label: _("Check/Fold"),
                        auto_check_call_label: _("Check/Call any"),
                        auto_raise_label: _("Raise"),
                        auto_check_label: _("check"),
                        auto_call_label: _("Call")
                    }));
            $('.jpoker_auto_action', auto_action_element).hide();
            $('input[type=checkbox]', auto_action_element).click(function() {
                    var clicked = this;
                    $('input[type=checkbox]', auto_action_element).each(function() {
                            if (this != clicked) {
                                this.checked = false;
                            }
                        });
                });

            //
            // hand strength
            //
            var hand_strength_element = $('#hand_strength' + id).html(jpoker.plugins.playerSelf.templates.hand_strength.supplant({
                        label: _("Hand strength:")
                    })).hide();

            if(serial == table.serial_in_position) {
                jpoker.plugins.playerSelf.inPosition(player, id);
            }
            $('#game_window' + id).addClass('jpoker_self');
            $('#sit_seat' + player.seat + id).removeClass('jpoker_self_get_seat');
            $('#seat' + player.seat + id).addClass('jpoker_player_self');
        },

        leave: function(player, packet, id) {
            var game_window = $('#game_window' + id);
            $('#sitout' + id).hide();
            $('#sitout_fold' + id).hide();
            $('#rebuy' + id).hide();
            $('#options' + id).hide();
            $('.jpoker_chat_input', game_window).hide();
            game_window.removeClass('jpoker_self');
            $('#player_seat' + packet.seat + id).removeClass('jpoker_player_self');
        },

        updateTable: function(table, what, packet, id) {
            switch(packet.type) {

            }
            return true;
        },

        rebuy_options: { width: 'none', height: 'none', autoOpen: false, resizable: false },

        rebuy: function(url, game_id, serial, id) {
            $('#rebuy' + id).show();
            var server = jpoker.getServer(url);
            var player = jpoker.getPlayer(url, game_id, serial);
            if(!player) {
                return false;
            }
            var table = jpoker.getTable(url, game_id);
            var limits = table.buyInLimits();
            var rebuy = $('#jpokerRebuy');
            if(rebuy.size() === 0) {
                $('body').append('<div id=\'jpokerRebuy\' class=\'jpoker_jquery_ui\' title=\'' + _("Add chips") + '\' />');
                rebuy = $('#jpokerRebuy');
                rebuy.dialog(this.rebuy_options);
            }
            var packet_type;
            var label;
            if ((player.state == 'buyin') && !player.buy_in_payed) {
                packet_type = 'PacketPokerBuyIn';
                label = _("Buy In");
            } else {
                packet_type = 'PacketPokerRebuy';
                label = _("Rebuy");
            }
            rebuy.html(this.templates.rebuy.supplant({
                        'min': jpoker.chips.SHORT(limits[0]),
                        'current': jpoker.chips.SHORT(limits[1]),
                        'title' : Math.floor(limits[1]*100),
                        'max': jpoker.chips.SHORT(limits[2]),
                        'label': label,
                        'auto_sitin_label': _("Sit in")
                    }));
            $('.jpoker_auto_sitin input', rebuy).each(function() { this.checked = server.preferences.auto_sitin; });

            $('.jpoker_rebuy_action', rebuy).click(function() {
                    var server = jpoker.getServer(url);
                    if(server) {
                        var amount = parseInt($('.jpoker_rebuy_current', rebuy).attr('title'), 10);
                        if (!isNaN(amount)) {
                            server.sendPacket({ 'type': packet_type,
                                        'serial': server.serial,
                                        'game_id': table.id,
                                        'amount': parseInt($('.jpoker_rebuy_current', rebuy).attr('title'), 10)
                                        });
                            if ($('.jpoker_auto_sitin input', rebuy).is(':checked')) {
                                $('#sitin' + id).click();
                            }
                            server.preferences.auto_sitin = $('.jpoker_auto_sitin input', rebuy).is(':checked');
                        } else {
                            jpoker.error('rebuy with NaN amount: ' + $('.jpoker_rebuy_current', rebuy).attr('title'));
                        }
                    }
                    rebuy.dialog('close');
                });
            $('.ui-slider-1', rebuy).slider({
                    min: limits[0]*100,
                        startValue: limits[1]*100,
                        max: limits[2]*100,
                        stepping: 1,
                        change: function(event, ui) {
                        var current = $('.jpoker_rebuy_current').html(ui.value/100.0);
                        current.attr('title', ui.value);
                    }
                });
            return rebuy;
        },

        updateAutoAction: function(player, id) {
        },

        beginRound: function(player, id) {
            var server = jpoker.servers[player.url];
            var table = server.tables[player.game_id];
            var auto_action_element = $('#auto_action' + id);
            if (player.in_game) {
                $('.jpoker_auto_action', auto_action_element).show();
                if (table.betLimit.call > 0) {
                    $('.jpoker_auto_check', auto_action_element).hide();
                    $('.jpoker_call_amount', auto_action_element).text(jpoker.chips.SHORT(table.betLimit.call));
                } else {
                    $('.jpoker_auto_call', auto_action_element).hide();
                }
            }
        },

        highestBetIncrease: function(player, id) {
            var server = jpoker.servers[player.url];
            var table = server.tables[player.game_id];
            var auto_action_element = $('#auto_action' + id);
            if (player.in_game) {
                if (table.betLimit.call > 0) {
                    $('.jpoker_auto_action', auto_action_element).show();
                    $('input[name=auto_check]')[0].checked = false;
                    $('input[name=auto_call]')[0].checked = false;
                    $('input[name=auto_raise]')[0].checked = false;
                    $('.jpoker_auto_check', auto_action_element).hide();
                    $('.jpoker_auto_call', auto_action_element).show();
                    $('.jpoker_call_amount', auto_action_element).text(jpoker.chips.SHORT(table.betLimit.call));
                }
            }
        },


        handStart: function(player, id) {
            var hand_strength_element = $('#hand_strength' + id).hide();
            $('.jpoker_hand_strength_value', hand_strength_element).text('');
        },

        inGame: function(player, id) {
            var auto_action_element = $('#auto_action' + id);
            $('.jpoker_auto_action', auto_action_element).hide();
        },

        handStrength: function(player, hand, id) {
            var hand_strength_element = $('#hand_strength' + id).show();
            $('.jpoker_hand_strength_value', hand_strength_element).text(hand);
            jpoker.plugins.playerSelf.callback.hand_strength.display_done(hand_strength_element);
        },

        tableMove: function(player, packet, id) {
            jpoker.plugins.playerSelf.callback.table_move(packet);
        },

        sit: function(player, id) {
            var name = $('#player_seat' + player.seat + '_name' + id);
            var url = player.url;
            var server = jpoker.servers[url];
            var serial = player.serial;
            var game_id = player.game_id;
            name.unbind('click');
            name.html(player.name);
            name.click(function() {
                    var server = jpoker.servers[url];
                    if(server) {
                        server.sendPacket({ 'type': 'PacketPokerSitOut',
                                    'serial': serial,
                                    'game_id': game_id
                                    });
                    }
                });
            $('#sitout' + id).show();
            $('#sitout_fold' + id).show();
            $('#sitin' + id).hide();
        },

        sitOut: function(player, id) {
            var name = $('#player_seat' + player.seat + '_name' + id);
            var url = player.url;
            var server = jpoker.servers[url];
            var serial = player.serial;
            var game_id = player.game_id;
            name.unbind('click');
            name.html(_("click to sit"));
            name.click(function() {
                    var server = jpoker.servers[url];
                    if(server) {
                        var player = server.tables[game_id].serial2player[serial];
                        if(player.money > jpoker.chips.epsilon) {
                            server.sendPacket({ 'type': 'PacketPokerAutoBlindAnte',
                                        'serial': serial,
                                        'game_id': game_id
                                        });
                            server.sendPacket({ 'type': 'PacketPokerSit',
                                        'serial': serial,
                                        'game_id': game_id
                                        });
                        } else {
                            jpoker.dialog(_("not enough money"));
                        }
                    }
                });
            $('#sitout' + id).hide();
            $('#sitout_fold' + id).hide();
            $('#sitin' + id).show();
        },

        chips: function(player, id) {
            var table = jpoker.getTable(player.url, player.game_id);
            if(table.state == 'end') {
                var limits = table.buyIn;
                if(player.money < limits.max) {
                    $('#rebuy' + id).show();
                } else {
                    $('#rebuy' + id).hide();
                }
            }

            if (table.is_tourney) {
                $('#rebuy' + id).hide();
            } else if ((player.state == 'buyin') &&
                       (player.money === 0) &&
                       (table.reason != 'TablePicker')) {
                $('#rebuy' + id).click();
            } else if (player.state != 'buyin' && player.broke) {
                $('#rebuy' + id).click();
            }
        },

        inPosition: function(player, id) {
            var game_id = player.game_id;
            var serial = player.serial;
            var url = player.url;
            var server = jpoker.getServer(url);
            var table = jpoker.getTable(url, game_id);
            var betLimit = table.betLimit;
            var send = function(what) {
                var server = jpoker.getServer(url);
                if(server) {
                    server.sendPacket({ 'type': 'PacketPoker' + what,
                                'serial': serial,
                                'game_id': game_id
                                });
                }
                return false; // prevent default action on <a href>
            };

            var auto_action_element = $('#auto_action' + id);
            var auto_check_fold_input = $('input[name=auto_check_fold]', auto_action_element);
            var auto_check_call_input = $('input[name=auto_check_call]', auto_action_element);
            var auto_raise_input = $('input[name=auto_raise]', auto_action_element);
            var auto_check_input = $('input[name=auto_check]', auto_action_element);
            var auto_call_input = $('input[name=auto_call]', auto_action_element);

            if (player.sit_out_fold_sent) {
                send('Fold');
            }

            if (auto_check_fold_input.is(':checked')) {
                if (betLimit.call > 0) {
                    send('Fold');
                } else {
                    send('Check');
                }
            }
            if (auto_check_call_input.is(':checked')) {
                if (betLimit.call > 0) {
                    send('Call');
                } else {
                    send('Check');
                }
            }
            if (auto_raise_input.is(':checked')) {
                send('Raise');
            }
            if (auto_check_input.is(':checked')) {
                if (betLimit.call === 0) {
                    send('Check');
                }
            }
            if (auto_call_input.is(':checked')) {
                if (betLimit.call > 0) {
                    send('Call');
                }
            }
            $('input[type=checkbox]', auto_action_element).each(function() {
                    this.checked = false;
                });
            $('.jpoker_auto_action', auto_action_element).hide();

            $('#fold' + id).unbind('click').click(function() { return send('Fold'); }).show();
            if(betLimit.call > 0) {
                var call_element = $('#call' + id);
                $('.jpoker_call_amount', call_element).text(jpoker.chips.SHORT(betLimit.call));
                call_element.unbind('click').click(function() { return send('Call'); }).show();
            } else {
                $('#check' + id).unbind('click').click(function() { return send('Check'); }).show();
            }
            if(betLimit.allin > betLimit.call) {
                var click;
                if(betLimit.max > betLimit.min) {
                    var raise = $('#raise_range' + id);
                    raise.html(jpoker.plugins.raise.getHTML(betLimit));
                    raise.show(); // must be visible otherwise outerWeight/outerWidth returns 0

                    var raise_input = $('#raise_input' + id);
                    raise_input.empty();
                    $('<input class=\'jpoker_raise_input\' type=\'text\'>').appendTo(raise_input).val(betLimit.min);
                    raise_input.show();

                    $('.ui-slider-1', raise).slider({
                            min: betLimit.min,
                                startValue: betLimit.min*100,
                                max: betLimit.max*100,
                                axis: 'horizontal',
                                stepping: betLimit.step*100,
                                change: function(event, ui) {
                                var current = $('.jpoker_raise_current', ui.element);
                                current.html(jpoker.chips.SHORT(ui.value/100.0));
                                current.attr('title', ui.value);
                                $('.jpoker_raise_input', raise_input).val(jpoker.chips.SHORT(ui.value/100.0));
                            }
                        });

                    $('.jpoker_raise_input', raise_input).change(function() {
                            var value = parseFloat($(this).val().replace(',', '.'));
                            if (isNaN(value)) {
                                value = $('.ui-slider-1', raise).slider('value', 0);
                                $(this).val(jpoker.chips.SHORT(value/100.0));
                            } else {
                                $('.ui-slider-1', raise).slider('moveTo', value*100);
                            }
                        });

                    click = function() {
                        var server = jpoker.getServer(url);
                        if(server) {
                            var amount = parseInt($('.jpoker_raise_current', raise).attr('title'), 10);
                            if (!isNaN(amount)) {
                                server.sendPacket({ 'type': 'PacketPokerRaise',
                                            'serial': serial,
                                            'game_id': game_id,
                                            'amount': parseInt($('.jpoker_raise_current', raise).attr('title'), 10)
                                            });
                            } else {
                                jpoker.error('raise with NaN amount: ' + $('.jpoker_raise_current', raise).attr('title'));
                            }
                        }
                    };
                    $('#allin' + id).unbind('click').click(function() {
                            var server = jpoker.getServer(url);
                            if(server) {
                                server.sendPacket({ 'type': 'PacketPokerRaise',
                                            'serial': serial,
                                            'game_id': game_id,
                                            'amount': betLimit.allin*100
                                            });
                            }
                        }).show();
                    if(betLimit.allin > betLimit.pot) {
                       $('#pot' + id).unbind('click').click(function() {
                            var server = jpoker.getServer(url);
                            if(server) {
                                server.sendPacket({ 'type': 'PacketPokerRaise',
                                            'serial': serial,
                                            'game_id': game_id,
                                            'amount': betLimit.pot*100
                                            });
                            }
                        }).show();
                       $('#halfpot' + id).unbind('click').click(function() {
                            var server = jpoker.getServer(url);
                            if(server) {
                                server.sendPacket({ 'type': 'PacketPokerRaise',
                                            'serial': serial,
                                            'game_id': game_id,
                                            'amount': betLimit.pot*50
                                            });
                            }
                        }).show();
                       $('#threequarterpot' + id).unbind('click').click(function() {
                            var server = jpoker.getServer(url);
                            if(server) {
                                server.sendPacket({ 'type': 'PacketPokerRaise',
                                            'serial': serial,
                                            'game_id': game_id,
                                            'amount': betLimit.pot*75
                                            });
                            }
                        }).show();
                    }
                } else {
                    click = function() {
                        var server = jpoker.getServer(url);
                        if(server) {
                            server.sendPacket({ 'type': 'PacketPokerRaise',
                                        'serial': serial,
                                        'game_id': game_id,
                                        'amount': 0
                                        });
                        }
                    };
                }
                $('#raise' + id).unbind('click').click(click).show();
            }
            jpoker.plugins.playerSelf.callback.sound.in_position(server);
            $('#game_window' + id).addClass('jpoker_self_in_position');
        },

        lostPosition: function(player, packet, id) {
            jpoker.plugins.playerSelf.hide(id);
           $('#game_window' + id).removeClass('jpoker_self_in_position');
        },

        timeout: function(player, id, packet) {
            var server = jpoker.getServer(player.url);
            switch(packet.type) {
            case 'PacketPokerTimeoutWarning':
                jpoker.plugins.playerSelf.callback.sound.timeout_warning(server);
                break;
            case 'PacketPokerTimeoutNotice':
                jpoker.plugins.playerSelf.callback.sound.timeout_notice(server);
                break;
            }
        },

        names: [ 'fold', 'call', 'check', 'raise', 'raise_range', 'raise_input', 'rebuy', 'allin', 'pot', 'halfpot', 'threequarterpot' ],

        hide: function(id) {
            for(var i = 0; i < this.names.length; i++) {
                $('#' + this.names[i] + id).hide();
            }
        },

        destroy: function(player, dummy, id) {
            jpoker.plugins.playerSelf.hide(id);
        },

        templates: {
            rebuy: '<div class=\'jpoker_rebuy_bound jpoker_rebuy_min\'>{min}</div><div class=\'ui-slider-1\'><div class=\'ui-slider-handle\'></div></div><div class=\'jpoker_rebuy_current\' title=\'{title}\'>{current}</div><div class=\'jpoker_rebuy_bound jpoker_rebuy_max\'>{max}</div><div class=\'ui-dialog-buttonpane\'><button class=\'jpoker_rebuy_action\'>{label}</button></div><div class=\'jpoker_auto_sitin\'><input name=\'jpoker_auto_sitin\' type=\'checkbox\'></input><label for=\'jpoker_auto_sitin\'>{auto_sitin_label}</label></div>',
            auto_action: '<div class=\'jpoker_auto_check_fold jpoker_auto_action\'><label for=\'auto_check_fold{id}\'>{auto_check_fold_label}</label><input type=\'checkbox\' name=\'auto_check_fold\' id=\'auto_check_fold{id}\' /></div><div class=\'jpoker_auto_check jpoker_auto_action\'><label for=\'auto_check{id}\'>{auto_check_label}</label><input type=\'checkbox\' name=\'auto_check\' id=\'auto_check{id}\' /></div><div class=\'jpoker_auto_call jpoker_auto_action\'><label for=\'auto_call{id}\'>{auto_call_label} <span class=\'jpoker_call_amount\'></span></label><input type=\'checkbox\' name=\'auto_call\' id=\'auto_call{id}\' /></div><div class=\'jpoker_auto_check_call jpoker_auto_action\'><label for=\'auto_check_call{id}\'>{auto_check_call_label}</label><input type=\'checkbox\' name=\'auto_check_call\' id=\'auto_check_call{id}\' /></div><div class=\'jpoker_auto_raise jpoker_auto_action\'><label for=\'auto_raise{id}\'>{auto_raise_label}</label><input type=\'checkbox\' name=\'auto_raise\' id=\'auto_raise{id}\' /></div>',
            hand_strength: '<span class=\'jpoker_hand_strength_label\'>{label}</span> <span class=\'jpoker_hand_strength_value\'></span>',
            action: '<div class=\'jpoker_button\'><a href=\'javascript://\'>{action}</a></div>',
            rebuy_button: '<div class=\'jpoker_rebuy\'><a href=\'javascript://\'>{rebuy}</a></div>',
            sitout: '<div class=\'jpoker_sitout\'><a href=\'javascript://\'>{sitout}</a></div>',
            sitin: '<div class=\'jpoker_sitin\'><a href=\'javascript://\'>{sitin}</a></div>'
        },

        callback: {
            sound: {
                in_position : function(server) {
                    if(server.preferences.sound) {
                        $('#jpokerSound').html('<' + jpoker.sound + ' src=\'' + jpoker.sound_directory + 'player_hand.swf\' />');
                    }
                },
                timeout_warning : function(server) {
                    if(server.preferences.sound) {
                        $('#jpokerSound').html('<' + jpoker.sound + ' src=\'' + jpoker.sound_directory + 'player_timeout_warning.swf\' />');
                    }
                },
                timeout_notice : function(server) {
                    if(server.preferences.sound) {
                        $('#jpokerSound').html('<' + jpoker.sound + ' src=\'' + jpoker.sound_directory + 'player_timeout_notice.swf\' />');
                    }
                }
            },

            hand_strength: { display_done : function() { } },
            
            table_move: function(packet) {
            }
        }
    };

    //
    // options (table plugin helper)
    //

    jpoker.plugins.options = {
        templates: {
            button: '<div class=\'jpoker_options\'><a href=\'javascript://\'>{options_label}</a></div>',
            dialog: '<div id=\'jpokerOptionsDialog\' class=\'jpoker_options_dialog jpoker_jquery_ui\'>{auto_muck}</div>'
        }
    };

    //
    // muck (table plugin helper)
    //

    jpoker.plugins.muck = {
        AUTO_MUCK_WIN: 1,
        AUTO_MUCK_LOSE: 2,
        templates : {
            muck_accept: '<div class=\'jpoker_muck jpoker_muck_accept\'><a href=\'javascript://\'>{muck_accept_label}</a></div>',
            muck_deny: '<div class=\'jpoker_muck jpoker_muck_deny\'><a href=\'javascript://\'>{muck_deny_label}</a></div>',
            auto_muck: '<div class=\'jpoker_auto_muck\'><div class=\'jpoker_auto_muck_win\'><input type=\'checkbox\' name=\'auto_muck_win\' id=\'auto_muck_win{id}\'></input><label for=\'auto_muck_win{id}\' title=\'{auto_muck_win_title}\'>{auto_muck_win_label}</label></div><div class=\'jpoker_auto_muck_lose\'><input type=\'checkbox\' name=\'auto_muck_lose\' id=\'auto_muck_lose{id}\'></input><label for=\'auto_muck_lose{id}\' title=\'{auto_muck_lose_title}\'>{auto_muck_lose_label}</label></div></div>'
        },
        muckRequest: function(server, packet, id) {
            if ($.inArray(server.serial, packet.muckable_serials) != -1) {
                $('#muck_accept' + id).show();
                $('#muck_deny' + id).show();
            }
        },

        muckRequestTimeout: function(id) {
            $('#muck_accept' + id).hide();
            $('#muck_deny' + id).hide();
        },
        sendAutoMuck: function(server, game_id, id) {
            var auto_muck = 0;
            if ($('#auto_muck_win' + id).is(':checked')) {
                auto_muck |= jpoker.plugins.muck.AUTO_MUCK_WIN;
            }
            if ($('#auto_muck_lose' + id).is(':checked')) {
                auto_muck |= jpoker.plugins.muck.AUTO_MUCK_LOSE;
            }
            server.sendPacket({type: 'PacketPokerAutoMuck', serial: server.serial, game_id: game_id, auto_muck: auto_muck});
            server.preferences.extend({auto_muck_win: $('#auto_muck_win' + id).is(':checked'), auto_muck_lose: $('#auto_muck_lose' + id).is(':checked')});
        }
    };

    //
    // cards (table plugin helper)
    //
    jpoker.plugins.cards = {
        update: function(cards, prefix, id) {
            jpoker.plugins.cards.update_value(cards, prefix, id);
            jpoker.plugins.cards.update_visibility(cards, prefix, id);
        },
        update_value: function(cards, prefix, id) {
            for(var i = 0; i < cards.length; i++) {
                var card = cards[i];
                var element = $('#' + prefix + i + id);
                element.removeClass().addClass('jpoker_card jpoker_ptable_' + prefix + i);
                if(card !== null) {
                    var card_image = 'back';
                    if(card != 255) {
                        card_image = jpoker.cards.card2string[card & 0x3F];
                    }
                    element.addClass('jpoker_card_' + card_image);
                }
            }
        },
        update_visibility: function(cards, prefix, id) {
            for(var i = 0; i < cards.length; i++) {
                var card = cards[i];
                var element = $('#' + prefix + i + id);
                if(card !== null) {
                    element.show();
                } else {
                    element.hide();
                }
            }
        }
    };
    //
    // chips (table plugin helper)
    //
    jpoker.plugins.chips = {
        template: '<div class=\'jpoker_chips_image\'></div><div class=\'jpoker_chips_amount\'></div>',
        update: function(chips, id) {
            var element = $(id);
            if(chips > 0) {
                element.show();
                $('.jpoker_chips_amount', element).text(jpoker.chips.SHORT(chips));
                element.attr('title', jpoker.chips.LONG(chips));
            } else {
                element.hide();
            }
        }
    };

    $.fn.getPosition = function() {
        var visible = $(this).is(':visible');
        $(this).show();
        var position = $(this).position();
        if (visible === false) {
            $(this).hide();
        }
        return position;
    };

    $.fn.getOffset = function() {
        var visible = $(this).is(':visible');
        $(this).show();
        var position = $(this).offset();
        if (visible === false) {
            $(this).hide();
        }
        return position;
    };

    $.fn.moveFrom = function(from, options) {
        var positionFrom = $(from).getPosition();
        var positionTo = $(this).getPosition();
        $(this).css(positionFrom).animate(positionTo, options);
        return this;
    };

    //
    // raise (SelfPlayer plugin helper)
    //
    jpoker.plugins.raise = {
        template: '<div class=\'jpoker_raise_label\'>{raise_label}</div><div class=\'jpoker_raise_bound jpoker_raise_min\'>{raise_min}</div><div class=\'jpoker_raise_current\' title=\'{raise_current_title}\'>{raise_current}</div><div class=\'jpoker_raise_bound jpoker_raise_max\'>{raise_max}</div><div class=\'ui-slider-1\'><div class=\'ui-slider-handle\'></div></div>',
        getHTML: function(betLimit) {
            var t = this.template;
            return t.supplant({raise_label: _("Raise"),
                                                raise_min: jpoker.chips.SHORT(betLimit.min),
                                                raise_current_title: Math.floor(betLimit.min*100),
                                                raise_current: jpoker.chips.SHORT(betLimit.min),
                                                raise_max: jpoker.chips.SHORT(betLimit.max)});
        }
    };

    //
    // userInfo
    //
    jpoker.plugins.userInfo = function(url, options) {

        var userInfo = jpoker.plugins.userInfo;
        var opts = $.extend({}, userInfo.defaults, options);
        var server = jpoker.url2server({ url: url });

        return this.each(function() {
                var $this = $(this);

                var id = jpoker.uid();

                $this.append('<div class=\'jpoker_widget jpoker_user_info\' id=\'' + id + '\'></div>');

                var updated = function(server, what, packet) {
                    var element = document.getElementById(id);
                    if(element) {
                        if(packet && packet.type == 'PacketPokerPersonalInfo') {
                            $(element).html(userInfo.getHTML(packet, url));
                            $('.jpoker_user_info_submit', element).click(function() {
                                    $('.jpoker_user_info_feedback', element).text(_("Updating..."));
                                    var info = {};
                                    $('input[type=text]', element).each(function() {
                                            info[$(this).attr('name')] = $(this).attr('value');
                                        });
                                    $('input[type=password]', element).each(function() {
                                            info[$(this).attr('name')] = $(this).attr('value');
                                        });
                                    server.setPersonalInfo(info);
                                });
                            if (packet.set_account) {
                                $('.jpoker_user_info_feedback', element).text(_("Updated"));
                            }
                            var avatar_url = server.urls.avatar+'/'+server.serial;
                            var avatar_preview = $('.jpoker_user_info_avatar_preview', element);
                            avatar_preview.css({
                                    'background-image': 'url("' + avatar_url + '")',
                                    'display': 'block'
                                    });
                            $('.jpoker_user_info_avatar_upload', element).ajaxForm({
                                    beforeSubmit: function() {
                                        $('.jpoker_user_info_avatar_upload_feedback', element).text(_("Uploading..."));
                                    },
                                    success: function(data) {
                                        if (data.search('image uploaded') != -1) {
                                            $('.jpoker_user_info_avatar_upload_feedback', element).text(_("Uploaded"));
                                            $('.jpoker_user_info_avatar_preview', element).replaceWith(avatar_preview.clone().css({'background-image': 'url("' + avatar_url + '")',
                                  'display': 'block'}));
                                        } else {
                                            $('.jpoker_user_info_avatar_upload_feedback', element).text(_("Uploading failed") + ': ' + data);
                                        }
                                    }
                                });
                            userInfo.callback.display_done(element);
                        }
                        return true;
                    } else {
                        return false;
                    }
                };

                server.registerUpdate(updated, null, 'userInfo ' + id);
                server.getPersonalInfo();

                return this;
            });
    };

    jpoker.plugins.userInfo.defaults = $.extend({
        }, jpoker.defaults);

    jpoker.plugins.userInfo.getHTML = function(packet, url) {
        var t = this.templates;
        var html = [];
        html.push(t.info.supplant($.extend({
                    'name_title': _("Login name"),
                    'password_title': _("Password"),
                    'password_confirmation_title': _("Password confirmation"),
                    'email_title': _("Email"),
                    'phone_title' : _("Phone Number"),
                    'firstname_title': _("First name"),
                    'lastname_title': _("Last name"),
                    'addr_street_title' : _("Street"),
                    'addr_street2_title' : _("Street (continue)"),
                    'addr_zip_title' : _("Zip code"),
                    'addr_town_title' : _("Town"),
                    'addr_state_title' : _("State"),
                    'addr_country_title' : _("Country"),
                    'gender_title' : _("Gender"),
                    'birthdate_title' : _("Birthdate"),
                    'submit_title': _("Update personal info")
                }, packet)));
        var server = jpoker.getServer(url);
        html.push(t.avatar.supplant({'upload_url' : server.urls.upload,
                                     'upload': _("Upload avatar")}));
        return html.join('\n');
    };

    jpoker.plugins.userInfo.templates = {
        info: '<table><tr><td>{name_title}</td><td><div class=\'jpoker_user_info_name\'>{name}</div></input></td></tr><tr><td>{password_title}</td><td><input type=\'password\' name=\'password\' value=\'{password}\'></input></td></tr><tr><td>{password_confirmation_title}</td><td><input type=\'password\' name=\'password_confirmation\'></input></td></tr><tr><td>{email_title}</td><td><input type=\'text\' name=\'email\' value=\'{email}\'></input></td></tr><tr><td>{phone_title}</td><td><input type=\'text\' name=\'phone\' value=\'{phone}\'></input></td></tr><tr><td>{firstname_title}</td><td><input type=\'text\' name=\'firstname\' value=\'{firstname}\'></input></td></tr><tr><td>{lastname_title}</td><td><input type=\'text\' name=\'lastname\' value=\'{lastname}\'></input></td></tr><tr><td>{addr_street_title}</td><td><input type=\'text\' name=\'addr_street\' value=\'{addr_street}\'></input></td></tr><tr><td>{addr_street2_title}</td><td><input type=\'text\' name=\'addr_street2\' value=\'{addr_street2}\'></input></td></tr><tr><td>{addr_zip_title}</td><td><input type=\'text\' name=\'addr_zip\' value=\'{addr_zip}\'></input></td></tr><tr><td>{addr_town_title}</td><td><input type=\'text\' name=\'addr_town\' value=\'{addr_town}\'></input></td></tr><tr><td>{addr_state_title}</td><td><input type=\'text\' name=\'addr_state\' value=\'{addr_state}\'></input></td></tr><tr><td>{addr_country_title}</td><td><input type=\'text\' name=\'addr_country\' value=\'{addr_country}\'></input></td></tr><tr><td>{gender_title}</td><td><input type=\'text\' name=\'gender\' value=\'{gender}\'></input></td></tr><tr><td>{birthdate_title}</td><td><input type=\'text\' name=\'birthdate\' value=\'{birthdate}\'></input></td></tr><tr><td><input class=\'jpoker_user_info_submit\' type=\'submit\' value=\'{submit_title}\'></input></td><td><div class=\'jpoker_user_info_feedback\'></div></td></tr></table>',
        avatar: '<div class=\'jpoker_user_info_avatar_preview\'></div><form class=\'jpoker_user_info_avatar_upload\' action=\'{upload_url}\' method=\'post\' enctype=\'multipart/form-data\'><input type=\'file\' name=\'filename\'></input><input type=\'submit\' value=\'{upload}\'></input></form><div class=\'jpoker_user_info_avatar_upload_feedback\'></div>'
    };

    jpoker.plugins.userInfo.callback = {
        display_done: function(element) {
        }
    };

    //
    // places
    //
    jpoker.plugins.places = function(url, options) {

        var places = jpoker.plugins.places;
        var opts = $.extend({}, places.defaults, options);
        var server = jpoker.url2server({ url: url });

        var player_serial = server.serial;
        if (opts.serial !== undefined) {
            player_serial = parseInt(opts.serial, 10);
        }

        return this.each(function() {
                var $this = $(this);

                var id = jpoker.uid();

                $this.append('<div class=\'jpoker_widget jpoker_places\' id=\'' + id + '\'></div>');

                var updated = function(server, what, packet) {
                    var element = document.getElementById(id);
                    if(element) {
                        if(packet && packet.type == 'PacketPokerPlayerPlaces') {
                            $(element).html(places.getHTML(packet, opts.table_link_pattern, opts.tourney_link_pattern));
                            if(opts.table_link_pattern === undefined) {
                                $.each(packet.tables, function(i, table) {
                                        $('#' + table, element).click(function() {
                                                var server = jpoker.getServer(url);
                                                if(server) {
                                                    server.tableJoin(table);
                                                }
                                            });
                                    });
                            }
                            if(opts.tourney_link_pattern === undefined) {
                                $.each(packet.tourneys, function(i, tourney) {
                                        $('#' + tourney, element).click(function() {
                                                var server = jpoker.getServer(url);
                                                if(server) {
                                                    var packet = {game_id: tourney, name: ''};
                                                    server.placeTourneyRowClick(server, packet);
                                                }
                                            });
                                    });
                            }
                            places.callback.display_done(element);
                        }
                        return true;
                    } else {
                        return false;
                    }
                };

                server.registerUpdate(updated, null, 'places ' + id);
                server.getPlayerPlaces(player_serial);

                return this;
            });
    };

    jpoker.plugins.places.defaults = $.extend({
        }, jpoker.defaults);

    jpoker.plugins.places.getHTML = function(packet, table_link_pattern, tourney_link_pattern) {
        var t = this.templates;
        var html = [];
        html.push(t.tables.header.supplant({table_title: _("Tables")}));
        $.each(packet.tables, function(i, table) {
                var game_id = table;
                if (table_link_pattern) {
                    table = t.tables.link.supplant({link: table_link_pattern.supplant({game_id: game_id}), name: game_id});
                }
                html.push(t.tables.rows.supplant({id: game_id,
                                table: table}));
            });
        html.push(t.tables.footer);

        html.push(t.tourneys.header.supplant({tourney_title: _("Tourneys")}));
        $.each(packet.tourneys, function(i, tourney) {
                var tourney_serial = tourney;
                if (tourney_link_pattern) {
                    tourney = t.tourneys.link.supplant({link: tourney_link_pattern.supplant({tourney_serial: tourney_serial}), name: tourney_serial});
                }
                html.push(t.tourneys.rows.supplant({id: tourney_serial,
                                tourney: tourney}));
            });
        html.push(t.tourneys.footer);
        return html.join('\n');
    };

    jpoker.plugins.places.templates = {
        tables : {
            header : '<div class=\'jpoker_places_tables\'><table><thead><tr><th>{table_title}</th></tr></thead><tbody>',
            rows : '<tr class=\'jpoker_places_table\' id={id}><td>{table}</td></tr>',
            footer : '</tbody></table></div>',
            link: '<a href=\'{link}\'>{name}</a>'
        },
        tourneys : {
            header : '<div class=\'jpoker_places_tourneys\'><table><thead><tr><th>{tourney_title}</th></tr></thead><tbody>',
            rows : '<tr class=\'jpoker_places_tourney\' id={id}><td>{tourney}</td></tr>',
            footer : '</tbody></table></div>',
            link: '<a href=\'{link}\'>{name}</a>'
        }
    };

    jpoker.plugins.places.callback = {
        display_done: function(element) {
        }
    };

    //
    // playerLookup
    //
    jpoker.plugins.playerLookup = function(url, options) {

        var playerLookup = jpoker.plugins.playerLookup;
        var opts = $.extend({}, playerLookup.defaults, options);
        var server = jpoker.url2server({ url: url });

        return this.each(function() {
                var $this = $(this);

                var id = jpoker.uid();
                var player_lookup_element = $('<div class=\'jpoker_widget jpoker_player_lookup\' id=\'' + id + '\'></div>').appendTo($this);

                var updated = function(server, what, packet) {
                    var element = document.getElementById(id);
                    if(element) {
                        if(packet) {
                            if (packet.type == 'PacketPokerPlayerPlaces') {
                                $('.jpoker_player_lookup_result', element).html(playerLookup.getHTML(packet, opts.table_link_pattern, opts.tourney_link_pattern));
                                if (opts.table_link_pattern === undefined) {
                                    $.each(packet.tables, function(i, table) {
                                            $('#' + table, element).click(function() {
                                                    var server = jpoker.getServer(url);
                                                    if(server) {
                                                        server.tableJoin(table);
                                                    }
                                                });
                                        });
                                }
                                if (opts.tourney_link_pattern === undefined) {
                                    $.each(packet.tourneys, function(i, tourney) {
                                            $('#' + tourney, element).click(function() {
                                                    var server = jpoker.getServer(url);
                                                    if(server) {
                                                        var packet = {game_id: tourney, name: ''};
                                                        server.placeTourneyRowClick(server, packet);
                                                    }
                                                });
                                        });
                                }
                                $('.jpoker_player_lookup_challenge a', element).click(function() {
                                        var server = jpoker.getServer(url);
                                        if(server) {
                                            if(server.loggedIn()) {
                                                server.placeChallengeClick(server, packet.serial);
                                            } else {
                                                jpoker.dialog(_("you must login before you can challenge the player"));
                                            }
                                        }
                                    });
                                playerLookup.callback.display_done(element);
                            } else if ((packet.type == 'PacketError') && (packet.other_type == jpoker.packetName2Type.PACKET_POKER_PLAYER_PLACES)) {
                                playerLookup.callback.error(packet);
                            }
                        }
                        return true;
                    } else {
                        return false;
                    }
                };

                server.registerUpdate(updated, null, 'playerLookup ' + id);

                $(player_lookup_element).html(playerLookup.getHTMLForm());
                $('.jpoker_player_lookup_submit', player_lookup_element).click(function() {
                        $('.jpoker_player_lookup_result', player_lookup_element).empty();
                        server.getPlayerPlacesByName($('.jpoker_player_lookup_input', player_lookup_element).val(), options);
                    });
                return this;
            });
    };

    jpoker.plugins.playerLookup.defaults = $.extend({
        }, jpoker.defaults);

    jpoker.plugins.playerLookup.getHTML = function(packet, table_link_pattern, tourney_link_pattern) {
        var t = this.templates;
        var html = [];
        html.push(t.tables.header.supplant({table_title: _("Tables")}));
        $.each(packet.tables, function(i, table) {
                var game_id = table;
                if (table_link_pattern) {
                    table = t.tables.link.supplant({link: table_link_pattern.supplant({game_id: game_id}), name: game_id});
                }
                html.push(t.tables.rows.supplant({id: game_id,
                                table: table}));
            });
        html.push(t.tables.footer);

        html.push(t.tourneys.header.supplant({tourney_title: _("Tourneys")}));
        $.each(packet.tourneys, function(i, tourney) {
                var tourney_serial = tourney;
                if (tourney_link_pattern) {
                    tourney = t.tourneys.link.supplant({link: tourney_link_pattern.supplant({tourney_serial: tourney_serial}), name: tourney_serial});
                }
                html.push(t.tourneys.rows.supplant({id: tourney_serial,
                                tourney: tourney}));
            });
        html.push(t.tourneys.footer);
        if(packet.tourneys.length > 0 || packet.tables.length > 0) {
            html.push(t.challenge.supplant({ 'label': _("Challenge player to a heads up tournament") }));
        }
        return html.join('\n');
    };

    jpoker.plugins.playerLookup.getHTMLForm = function() {
        var t = this.templates;
        var html = [];
        html.push(t.form.supplant({player_lookup: _("Look for player")}));
        return html.join('\n');
    };

    jpoker.plugins.playerLookup.templates = {
        form : '<input class=\'jpoker_player_lookup_input\' type=\'text\'></input><input class=\'jpoker_player_lookup_submit\' type=\'submit\' value=\'{player_lookup}\'></input><div class=\'jpoker_player_lookup_result\'></div>',
        tables : {
            header : '<div class=\'jpoker_player_lookup_tables\'><table><thead><tr><th>{table_title}</th></tr></thead><tbody>',
            rows : '<tr class=\'jpoker_player_lookup_table\' id={id}><td>{table}</td></tr>',
            footer : '</tbody></table></div>',
            link: '<a href=\'{link}\'>{name}</a>'
        },
        tourneys : {
            header : '<div class=\'jpoker_player_lookup_tourneys\'><table><thead><tr><th>{tourney_title}</th></tr></thead><tbody>',
            rows : '<tr class=\'jpoker_player_lookup_tourney\' id={id}><td>{tourney}</td></tr>',
            footer : '</tbody></table></div>',
            link: '<a href=\'{link}\'>{name}</a>'
        },
        challenge: '<div class=\'jpoker_player_lookup_challenge\'><a href=\'javascript://\'>{label}</a></div>'
    };

    jpoker.plugins.playerLookup.callback = {
        error: function(packet) {
        },

        display_done: function(element) {
        }
    };

    //
    // cashier
    //
    jpoker.plugins.cashier = function(url, options) {

        var cashier = jpoker.plugins.cashier;
        var opts = $.extend({}, cashier.defaults, options);
        var server = jpoker.url2server({ url: url });

        return this.each(function() {
                var $this = $(this);

                var id = jpoker.uid();

                $this.append('<div class=\'jpoker_widget jpoker_cashier\' id=\'' + id + '\'></div>');

                var updated = function(server, what, packet) {
                    var element = document.getElementById(id);
                    if(element) {
                        if(packet && packet.type == 'PacketPokerUserInfo') {
                            $(element).html(cashier.getHTML(packet));
                            cashier.callback.display_done(element);
                        }
                        return true;
                    } else {
                        return false;
                    }
                };

                server.registerUpdate(updated, null, 'cashier ' + id);
                server.getUserInfo();

                return this;
            });
    };

    jpoker.plugins.cashier.defaults = $.extend({
        }, jpoker.defaults);

    jpoker.plugins.cashier.getHTML = function(packet) {
        var t = this.templates;
        var html = [];
        html.push(t.currencies.header.supplant({currency_serial_title: _("Currency"),
                        currency_amount_title: _("Amount"),
                        currency_ingame_title: _("In Game"),
                        currency_points_title: _("Points")
                        }));
        $.each(packet.money, function(currency_serial, money) {
                html.push(t.currencies.rows.supplant({currency_serial: currency_serial.substr(1),
                                currency_amount: money[0]/=100,
                                currency_ingame: money[1]/=100,
                                currency_points: money[2]}));
            });
        html.push(t.currencies.footer);
        return html.join('\n');
    };

    jpoker.plugins.cashier.templates = {
        currencies : {
            header : '<div class=\'jpoker_cashier_currencies\'><table><thead><tr><th>{currency_serial_title}</th><th>{currency_amount_title}</th><th>{currency_ingame_title}</th><th>{currency_points_title}</th></tr></thead><tbody>',
            rows : '<tr class=\'jpoker_cashier_currency\'><td>{currency_serial}</td><td>{currency_amount}</td><td>{currency_ingame}</td><td>{currency_points}</td></tr>',
            footer : '</tbody></table></div>'
        }
    };

    jpoker.plugins.cashier.callback = {
        display_done: function(element) {
        }
    };

    //
    // tablepicker
    //
    jpoker.plugins.tablepicker = function(url, options) {

        var server = jpoker.url2server({ url: url });
        var tablepicker = jpoker.plugins.tablepicker;
        var opts = $.extend({}, tablepicker.defaults, options, server.preferences.tablepicker);

        return this.each(function() {
                var $this = $(this);
                var id = jpoker.uid();
                var element = $('<div class=\'jpoker_widget jpoker_tablepicker\' id=\'' + id + '\'></div>').appendTo($this);
                var updated = function(server, what, packet) {
                    var element = document.getElementById(id);
                    if(element) {
                        if(packet) {
                            if ((packet.type == 'PacketPokerTable') &&
                                (packet.reason == 'TablePicker')) {
                                $('.jpoker_tablepicker_error', element).text('');
                                $('.jpoker_tablepicker_error', element).hide();
                            } else if((packet.type == 'PacketPokerError') &&
                                      (packet.other_type == jpoker.packetName2Type.POKER_TABLE_PICKER)) {
                                $('.jpoker_tablepicker_error', element).text(packet.message);
                                $('.jpoker_tablepicker_error', element).show();
                            }
                        }
                        return true;
                    } else {
                        return false;
                    }
                };
                var getOptions = function() {
                    return {variant: $('input[name=variant].jpoker_tablepicker_option', element).val(),
                            betting_structure: $('input[name=betting_structure].jpoker_tablepicker_option ', element).val(),
                            currency_serial: $('input[name=currency_serial].jpoker_tablepicker_option', element).val()
                    };
                };
                opts.id = id;
                $(element).html(jpoker.plugins.tablepicker.template.supplant(opts));
                $('.jpoker_tablepicker_options', element).hide();
                $('.jpoker_tablepicker_error', element).hide();
                $('.jpoker_tablepicker_show_options', element).click(function() {
                        $('.jpoker_tablepicker_options', element).toggle();
                    });
                $('.jpoker_tablepicker_option', element).change(function() {
                        server.preferences.extend({tablepicker: getOptions()});
                    });

                $('.jpoker_tablepicker_submit', element).click(function() {
                        server.tablePick(getOptions());
                    });
                server.registerUpdate(updated, null, 'tablepicker ' + id);
                return this;
            });
    };

    jpoker.plugins.tablepicker.defaults = $.extend({
            variant: '',
            betting_structure: '',
            currency_serial: 0,
            submit_label: _("Play now"),
            show_options_label: _("Toggle options"),
            submit_title: _("Click here to automatically pick a table"),
            variant_label: _("Variant"),
            betting_structure_label: _("Betting structure"),
            currency_serial_label: _("Currency serial")
        }, jpoker.defaults);

    jpoker.plugins.tablepicker.template = '<input class=\'jpoker_tablepicker_submit\' type=\'submit\' value=\'{submit_label}\' title=\'{submit_title}\' /><a class=\'jpoker_tablepicker_show_options\' href=\'javascript://\'>{show_options_label}</a><div class=\'jpoker_tablepicker_options\'><label for=\'jpoker_tablepicker_option_variant{id}\'>{variant_label}</label><input class=\'jpoker_tablepicker_option\' type=\'text\' name=\'variant\' value=\'{variant}\' id=\'jpoker_tablepicker_option_variant{id}\'/><label for=\'jpoker_tablepicker_option_betting_structure{id}\'>{betting_structure_label}</label><input class=\'jpoker_tablepicker_option\' type=\'text\' name=\'betting_structure\' value=\'{betting_structure}\' id=\'jpoker_tablepicker_option_betting_structure{id}\'/><label for=\'jpoker_tablepicker_option_current_serial{id}\'>{currency_serial_label}</label><input class=\'jpoker_tablepicker_option\'type=\'text\' name=\'currency_serial\' value=\'{currency_serial}\' id=\'jpoker_tablepicker_option_current_serial{id}\'/></div><div class=\'jpoker_tablepicker_error\'></div>';

    //
    // signup
    //
    jpoker.plugins.signup = function(url, options) {

        var server = jpoker.url2server({ url: url });
        var signup = jpoker.plugins.signup;
        var opts = $.extend({}, signup.defaults, options, server.preferences.signup);

        return this.each(function() {
                var $this = $(this);
                var id = jpoker.uid();
                var element = $('<div class=\'jpoker_widget jpoker_signup jpoker_jquery_ui\' id=\'' + id + '\'></div>').appendTo($this);
                var updated = function(server, what, packet) {
                    var element = document.getElementById(id);
                    if(element) {
                        if(packet && packet.type == 'PacketPokerPersonalInfo') {
                            $(element).dialog('close');
                            return false;
                        }
                        return true;
                    } else {
                        return false;
                    }
                };
                opts.id = id;
                $(element).html(jpoker.plugins.signup.template.supplant({
                            login_label: _("Login name"),
                                password_label: _("Password"),
                                password_confirmation_label: _("Password confirmation"),
                                email_label: _("Email address"),
                                submit_label: _("Register")
                                }));

                $('input[type=submit]', element).click(function() {
                        var options = {
                            name: $('input[name=login]', element).val(),
                            password: $('input[name=password]', element).val(),
                            password_confirmation: $('input[name=password_confirmation]', element).val(),
                            email: $('input[name=email]', element).val()
                        };
                        server.createAccount(options);
                    });
                server.registerUpdate(updated, null, 'signup ' + id);
                $(element).dialog(opts.dialog);
                return this;
            });
    };

    jpoker.plugins.signup.defaults = $.extend({
            dialog: {
                resizable: false,
                draggable: false,
                modal: true,
                width: '400px',
                height: '300px'
            }
        }, jpoker.defaults);

    jpoker.plugins.signup.template = '<div class=\'jpoker_signup_content\'><dl><dt><label for=\'jpoker_signup_login{id}\'>{login_label}</label></dt><dd><input name=\'login\' type=\'text\' id=\'jpoker_signup_login{id}\'/></dd><dt><label for=\'jpoker_signup_password{id}\'>{password_label}</label></dt><dd><input name=\'password\' type=\'password\' id=\'jpoker_signup_password{id}\'/></dd><dt><label for=\'jpoker_signup_password_confirmation{id}\'>{password_confirmation_label}</label></dt></dt><dd><input name=\'password_confirmation\' type=\'password\' id=\'jpoker_signup_password_confirmation{id}\'/></dd><dt><label for=\'jpoker_signup_email{id}\'>{email_label}</label></dt><dd><input name=\'email\' type=\'text\' id=\'jpoker_signup_email{id}\'/></dd></dl><input type=\'submit\' value=\'{submit_label}\'/></div>';

    //
    // user preferences
    //
    jpoker.preferences = function(hash) {
            var cookie = 'jpoker_preferences_'+hash;
            if ($.cookie(cookie)) {
                $.extend(this, JSON.parse($.cookie(cookie)));
            }
            this.extend = function(preferences) {
                $.extend(this, preferences);
                this.save();
            };
            this.save = function() {
                $.cookie(cookie, JSON.stringify(this));
            };
    };
    jpoker.preferences.prototype = {
        auto_muck_win: true,
        auto_muck_lose: true,
        auto_sitin: true,
        sound: true
    };

    jpoker.compatibility = function(msie) {
        if(msie) {
            jpoker.msie_compatibility();
        } else {
            jpoker.other_compatibility();
        }
    };

    jpoker.compatibility($.browser.msie); // no coverage

    jpoker.copyright_text = jpoker.copyright_template.supplant({ 'jpoker-sources': jpoker.jpoker_sources, 'poker-network-sources': jpoker.poker_network_sources }).supplant({ 'jpoker-version': jpoker.jpoker_version, 'poker-network-version': jpoker.poker_network_version });

})(jQuery);
