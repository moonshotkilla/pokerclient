    //
    // table
    //
    jpoker.plugins.table = function(url, game_id, name, options) {

        var opts = $.extend({}, jpoker.plugins.table.defaults, options);
        var server = jpoker.url2server({ url: url });

        game_id = parseInt(game_id, 10);

        return this.each(function() {
                var $this = $(this);

                var id = jpoker.uid();

                var placeholder = jpoker.plugins.table.templates.placeholder.supplant({ 'name': name });
                $this.append('<span class=\'jpoker_widget jpoker_table\' id=\'' + id + '\'><div class=\'jpoker_connecting\'><div class=\'jpoker_connecting_message\'>' + placeholder + '</div><div class=\'jpoker_connecting_image\'></div></div></span>');

                if(game_id in server.tables) {
                    var element = document.getElementById(id);
                    jpoker.plugins.table.create($(element), id, server, game_id);
                    jpoker.plugins.table.callback.display_done(element);
                }

                return this;
            });
    };

    jpoker.plugins.table.defaults = $.extend({
        }, jpoker.defaults);

    jpoker.plugins.table.create = function(element, id, server, game_id) {
        var game_fixed, game_window;
        if(jpoker.verbose > 0) {
            jpoker.message('plugins.table.create ' + id + ' game: ' + game_id);
        }
        if(game_id in server.tables) {
            var url = server.url;
            var table = server.tables[game_id];
            element.html(this.templates.room.supplant({ id: id }));
            game_fixed = $('#game_fixed' + id);
            game_window = $('#game_window' + id);
            jpoker.plugins.table.seats(id, server, table);
            jpoker.plugins.table.dealer(id, table, table.dealer);
            jpoker.plugins.cards.update(table.board, 'board', id);
            $('#pots' + id).addClass('jpoker_pots jpoker_pots0').html(jpoker.plugins.table.templates.pots.supplant({
                        chips: jpoker.plugins.chips.template
                            }));
            for(var pot = 0; pot < table.pots.length; pot++) {
                jpoker.plugins.chips.update(table.pots[pot], '#pots' + id + ' .jpoker_pot' + pot );
            }

            for(var winner = 0; winner < 2; winner++) {
                $('#winner' + winner + id).hide();
            }
            $('#rebuy' + id).hide();
            $('#sitout' + id).hide();
            $('#sitin' + id).hide();
            $('#options' + id).hide();
            $('#muck_accept' + id).hide();
            $('#muck_deny' + id).hide();
            $('#quit' + id).click(function() {
                    var server = jpoker.getServer(url);
                    var table = jpoker.getTable(url, game_id);
                    if(server) {
                        server.tableQuit(game_id);
                        server.queueRunning(function(server) {
                                table.handler(server, game_id, { type: 'PacketPokerTableDestroy',
                                            game_id: game_id });
                            });
                    }
                }).hover(function(){
                        $(this).addClass('hover');
                    },function(){
                        $(this).removeClass('hover');
                    }).html('<div class=\'jpoker_quit\'><a href=\'javascript://\'>' + _("Exit") + '</a></div>');
            game_fixed.append(this.templates.chat.supplant({
                        chat_history_player_label: _("chat"),
                        chat_history_dealer_label: _("dealer")
                            }));
            $('.jpoker_chat_input', game_window).hide();
            jpoker.plugins.playerSelf.hide(id);
            for(var serial in table.serial2player) {
                jpoker.plugins.player.create(table, table.serial2player[serial], id);
            }
            jpoker.plugins.table.position(id, table, table.serial_in_position);
            jpoker.plugins.table.timeout(id, table, table.serial_in_position, 0.0);
            //
            // sound
            //
            jpoker.plugins.table.soundCreate('sound_control' + id, server);

            $('#table_info' + id).html(this.templates.table_info.supplant($.extend(table, {
                            name_label: _("Name: "),
                            variant_label: _("Variant: "),
                            betting_structure_label: _("Structure: "),
                            seats_label: _("Seats: "),
                            percent_flop_label: _("% Flop"),
                            player_timeout_label: _("Player timeout: "),
                            muck_timeout_label: _("Muck timeout: ")
                        })));

            $('.jpoker_table', element).append(jpoker.copyright_text);
            $('#powered_by' + id).addClass('jpoker_powered_by').html(this.templates.powered_by);


            for (var i = 0; i < 10; i+=1) {
                var sit_seat = $('#sit_seat' + i + id).addClass('jpoker_sit_seat');
                $('<div class=\'jpoker_sit_seat_progress\'>').appendTo(sit_seat);
            }

            // it does not matter to register twice as long as the same key is used
            // because the second registration will override the first
            table.registerUpdate(this.update, id, 'table update' + id);
            table.registerDestroy(this.destroy, id, 'table destroy' + id);
            table.registerReinit(this.reinit, id, 'table reinit' + id);
        }
    };

     jpoker.plugins.table.soundCreate = function(id, server) {
         if($('#jpokerSound').size() === 0) {
             $('body').append('<div id=\'jpokerSound\' />');
         }
         if($('#jpokerSoundAction').size() === 0) {
             $('body').append('<div id=\'jpokerSoundAction\' />');
         }
         if($('#jpokerSoundTable').size() === 0) {
             $('body').append('<div id=\'jpokerSoundTable\' />');
         }
         var element = $('#' + id);
         element.addClass('jpoker_sound_control');
         var url = server.url;
         function update_css(element, server) {
             if(server.preferences.sound) {
                 element.html(jpoker.plugins.table.templates.sound.supplant({ sound: _("Sound On") }));
                 element.removeClass('jpoker_sound_off');
             } else {
                 element.html(jpoker.plugins.table.templates.sound.supplant({ sound: _("Sound Off") }));
                 element.addClass('jpoker_sound_off');
             }
         }
         update_css(element, server);
         element.click(
             function() {
                 var server = jpoker.getServer(url);
                 server.preferences.sound = !server.preferences.sound;
                 server.preferences.save();
                 update_css($(this), server);
             });
     };

    jpoker.plugins.table.seats = function(id, server, table) {
        for(var seat = 0; seat < table.seats.length; seat++) {
            jpoker.plugins.player.seat(seat, id, server, table);
        }
    };

    jpoker.plugins.table.dealer = function(id, table, dealer) {
        for(var seat = 0; seat < table.seats.length; seat++) {
            if(seat == dealer) {
                $('#dealer' + seat + id).show();
            } else {
                $('#dealer' + seat + id).hide();
            }
        }
    };

    jpoker.plugins.table.position = function(id, table, serial_in_position) {
        var in_position = table.serial2player[serial_in_position];
        for(var seat = 0; seat < table.seats.length; seat++) {
            var seat_element = $('#player_seat' + seat + id);
            if(in_position && in_position.sit_out === false && in_position.seat == seat) {
                if(!seat_element.hasClass('jpoker_position')) {
                    seat_element.addClass('jpoker_position');
                }
            } else {
                if(seat_element.hasClass('jpoker_position')) {
                    seat_element.removeClass('jpoker_position');
                }
            }
        }
    };

    jpoker.plugins.table.timeout = function(id, table, serial_in_position, ratio) {
        var in_position = table.serial2player[serial_in_position];
        for(var seat = 0; seat < table.seats.length; seat++) {
            var timeout_element = $('#player_seat' + seat + '_timeout' + id);
            var width = parseFloat(timeout_element.css('width'));
            if(in_position && in_position.sit_out === false && in_position.seat == seat) {
                $('.jpoker_timeout_progress', timeout_element).stop().css({width: ratio*width+'px'}).show().animate({width: '0'}, {duration: ratio*table.player_timeout*1000, queue: false});
                timeout_element.attr('pcur', ratio*100).show();
            } else {
                timeout_element.hide();
            }
            timeout_element.find('.text').hide();
        }
    };

    jpoker.plugins.table.serial = function(id, server, table, serial) {
        if(serial in table.serial2player) {
            //
            // if the player who logs in is already sit at the table, recreate all
            //
            this.destroy(table, null, id);
            var element = document.getElementById(id);
            if(element) {
                this.create($(element), id, server, table.id);
            }
        } else {
            this.seats(id, server, table);
        }
    };

    jpoker.plugins.table.update = function(table, what, packet, id) {
        var element = document.getElementById(id);
        var server = jpoker.getServer(table.url);
        var url = table.url;
        var game_id = packet.game_id;
        var serial = packet.serial;
        var game_window = $('#game_window' + id);
        if(element && server) {
            switch(packet.type) {

            case 'PacketSerial':
                jpoker.plugins.table.serial(id, server, table, packet.serial);
                break;

            case 'PacketLogout':
                jpoker.plugins.table.seats(id, server, table);
                break;

            case 'PacketPokerPlayerArrive':
                jpoker.plugins.player.create(table, packet, id);
                if(server.loggedIn() && packet.serial == server.serial) {
                    $('.jpoker_sit_seat', game_window).hide();
                }
                break;

            case 'PacketPokerPlayerLeave':
                jpoker.plugins.player.leave(table, packet, id);
                if(server.loggedIn() && packet.serial == server.serial) {
                    jpoker.plugins.table.seats(id, server, table);
                }
                break;

            case 'PacketPokerUserInfo':
                jpoker.plugins.playerSelf.rebuy(url, game_id, serial, id);
                break;

            case 'PacketPokerState':
                jpoker.plugins.muck.muckRequestTimeout(id);
                break;

            case 'PacketPokerBoardCards':
                if (packet.cards.length > 0) {
                    jpoker.plugins.cards.update(table.board, 'board', id);
                    jpoker.plugins.table.callback.animation.deal_card(table, id, packet);
                    jpoker.plugins.table.callback.sound.deal_card(server);
                } else {
                    jpoker.plugins.cards.update(table.board, 'board', id);
                    jpoker.plugins.table.callback.animation.best_card_reset(table, id);
                }
                break;

            case 'PacketPokerBestCards':
                jpoker.plugins.table.callback.animation.best_card(table, id, packet);
                break;

            case 'PacketPokerDealCards':
                jpoker.plugins.table.callback.sound.deal_card(server);
                break;

            case 'PacketPokerPotChips':
                var count = 0;
                for(var pot = 0; pot < table.pots.length; pot+=1) {
                    if (table.pots[pot] !== 0) {
                        count += 1;
                    }
                }
                $('#pots' + id).removeClass().addClass('jpoker_ptable_pots jpoker_pots jpoker_pots'+count);
                jpoker.plugins.chips.update(table.pots[packet.index], '#pots' + id + ' .jpoker_pot' + packet.index);
                break;

            case 'PacketPokerChipsPotReset':
                $('#pots' + id).removeClass().addClass('jpoker_ptable_pots jpoker_pots jpoker_pots0');
                for(pot = 0; pot < table.pots.length; pot+=1) {
                    $('#pots' + id + ' .jpoker_pot' + pot).hide().children('.jpoker_chips_amount').text('');
                }
                break;

            case 'PacketPokerDealer':
                jpoker.plugins.table.dealer(id, table, packet.dealer);
                break;

            case 'PacketPokerPosition':
                jpoker.plugins.table.position(id, table, packet.serial);
                jpoker.plugins.table.timeout(id, table, packet.serial, 1.0);
                break;

            case 'PacketPokerTimeoutWarning':
                jpoker.plugins.table.timeout(id, table, packet.serial, 0.5);
                break;

            case 'PacketPokerTimeoutNotice':
                jpoker.plugins.table.timeout(id, table, packet.serial, 0.0);
                break;

            case 'PacketPokerChat':
                var filtered_packet = jpoker.plugins.table.callback.chat_filter(table, packet);
                if(filtered_packet !== null) {
                    var lines = filtered_packet.message.replace(/\n$/, '').split('\n');
                    var chat;
                    var prefix = '';
                    if (filtered_packet.serial === 0) {
                        chat = $('.jpoker_chat_history_dealer', game_window);
                        prefix = _("Dealer") + ': ';
                    }
                    else {
                        chat = $('.jpoker_chat_history_player', game_window);
                        if(filtered_packet.serial in table.serial2player) {
                            prefix = table.serial2player[filtered_packet.serial].name + ': ';
                        }
                    }
                    for(var line = 0; line < lines.length; line++) {
                        var message = lines[line];
                        if (filtered_packet.serial === 0) {
                            message = message.replace(/^Dealer: /, '');
                        }
                        var chat_line = $('<div class=\'jpoker_chat_line\'>').appendTo(chat);
                        var chat_prefix = $('<span class=\'jpoker_chat_prefix\'></span>').appendTo(chat_line).text(prefix);
                        var chat_message = $('<span class=\'jpoker_chat_message\'></span>').appendTo(chat_line).text(message);
                    }
                    chat.attr('scrollTop', chat.attr('scrollHeight') || 0);
                jpoker.plugins.table.callback.chat_changed(chat);
                }
                break;

            case 'PacketPokerMuckRequest':
                jpoker.plugins.muck.muckRequest(server, packet, id);
                break;

            case 'PacketPokerStart':
                var table_info = $('#table_info' + id);
                if (table.is_tourney) {
                    $('.jpoker_table_info_level', table_info).html(table.level);
                }
                jpoker.plugins.table.callback.hand_start(packet);
                break;

            case 'PacketPokerTableTourneyBreakBegin':
                jpoker.plugins.table.callback.tourney_break(packet);
                break;

            case 'PacketPokerTableTourneyBreakDone':
                jpoker.plugins.table.callback.tourney_resume(packet);
                break;

            case 'PacketPokerTourneyRank':
                jpoker.plugins.table.rank(table, packet, id);
                break;

            case 'PacketPokerShowdown':
                if(packet.showdown_stack && packet.showdown_stack.length > 0) {
                    var serial2delta = packet.showdown_stack[0].serial2delta;
                    if(serial2delta && server.serial in serial2delta && serial2delta[server.serial] > 0) {
                        jpoker.plugins.table.callback.sound.self_win(server);
                    }
                }
                break;
            }

            return true;
        } else {
            return false;
        }
    };

    jpoker.plugins.table.destroy = function(table, what, packet, id) {
        // it is enough to destroy the DOM elements, even for players
        if(jpoker.verbose) {
            jpoker.message('plugins.table.destroy ' + id);
        }
        jpoker.plugins.table.callback.quit(table, packet);
        $('#game_window' + id).remove();
        if (table.tourney_rank !== undefined) {
            jpoker.plugins.table.callback.tourney_end(table);
        }
        return false;
    };

    jpoker.plugins.table.reinit = function(table, what, packet, id) {
        jpoker.plugins.table.destroy(table, 'destroy', null, id);
        var element = document.getElementById(id);
        var server = jpoker.getServer(table.url);
        if(element && server) {
            jpoker.plugins.table.create($(element), id, server, table.id);
            return true;
        } else {
            return false;
        }
    };

    jpoker.plugins.table.rank = function(table, packet, id) {
        var rankDialog = $('#jpokerRankDialog');
        if(rankDialog.size() === 0) {
            $('body').append('<div id=\'jpokerRankDialog\' class=\'jpoker_jquery_ui\' />');
            rankDialog = $('#jpokerRankDialog');
            if(jpoker.verbose > 0) {
                jpoker.message(jpoker.plugins.table.rank.options);
            }
            rankDialog.dialog(jpoker.plugins.table.rank.options);
        }
        var rank = _(jpoker.plugins.table.templates.rank); // necessary because i18n is inactive when the template is first read
        packet.money = jpoker.chips.LONG(packet.money/100.0);
        rankDialog.html(rank.supplant(packet)).dialog('open');
        var url = table.url;
        $('#jpokerRankDialog .jpoker_tournament_details').click(function() {
                var server = jpoker.getServer(url);
                if(server) {
                    server.rankClick(server, packet.serial);
                }});
    };

    jpoker.plugins.table.rank.options = { width: 'none', height: 'none', autoOpen: false, resizable: false, dialogClass: 'jpoker_dialog_rank'};

    jpoker.plugins.table.templates = {
        room: 'expected to be overriden by mockup.js but was not',
        tourney_break: '<div>{label}</div><div>{date}</div>',
        powered_by: '<a title=\'Powered by jpoker\' href=\'javascript://\' onclick=\'$.jpoker.copyright()\' >Powered by jpoker</a>',
        chat: '<div class=\'jpoker_chat_input\'><input value=\'chat here\' type=\'text\' width=\'100%\' /></div><div class=\'jpoker_chat_history_player_box\'><div class=\'jpoker_chat_history_player_heading\'>{chat_history_player_label}</div><div class=\'jpoker_chat_history_player\'></div></div><div class=\'jpoker_chat_history_dealer_box\'><div class=\'jpoker_chat_history_dealer_heading\'>{chat_history_dealer_label}</div><div class=\'jpoker_chat_history_dealer\'></div></div>',
        placeholder: _("connecting to table {name}"),
        table_info: '<div class=\'jpoker_table_info_name\'><span class=\'jpoker_table_info_name_label\'>{name_label}</span>{name}</div><div class=\'jpoker_table_info_variant\'><span class=\'jpoker_table_info_variant_label\'>{variant_label}</span>{variant}</div><div class=\'jpoker_table_info_blind\'><span class=\'jpoker_table_info_blind_label\'>{betting_structure_label}</span>{betting_structure}</div><div class=\'jpoker_table_info_seats\'><span class=\'jpoker_table_info_seats_label\'>{seats_label}</span>{max_players}</div><div class=\'jpoker_table_info_flop\'>{percent_flop}<span class=\'jpoker_table_info_flop_label\'>{percent_flop_label}</span></div><div class=\'jpoker_table_info_player_timeout\'><span class=\'jpoker_table_info_player_timeout_label\'>{player_timeout_label}</span>{player_timeout}</div><div class=\'jpoker_table_info_muck_timeout\'><span class=\'jpoker_table_info_muck_timeout_label\'>{muck_timeout_label}</span>{muck_timeout}</div><div class=\'jpoker_table_info_level\'></div>',
        date: '',
        pots: '<div class=\'jpoker_pots_align\'><span class=\'jpoker_pot jpoker_pot9\'>{chips}</span><span class=\'jpoker_pot jpoker_pot7\'>{chips}</span><span class=\'jpoker_pot jpoker_pot5\'>{chips}</span><span class=\'jpoker_pot jpoker_pot3\'>{chips}</span><span class=\'jpoker_pot jpoker_pot1\'>{chips}</span><span class=\'jpoker_pot jpoker_pot0\'>{chips}</span><span class=\'jpoker_pot jpoker_pot2\'>{chips}</span><span class=\'jpoker_pot jpoker_pot4\'>{chips}</span><span class=\'jpoker_pot jpoker_pot6\'>{chips}</span><span class=\'jpoker_pot jpoker_pot8\'>{chips}</span></div>',
        rank: _("Won {money} chips, {rank} out of {players}. Click <span class=\'jpoker_tournament_details\'>here</span> to see the tournament details."),
        sound: "{sound}"
    };

    jpoker.plugins.table.callback = {
        hand_start: function(packet) {
        },
        tourney_break: function(packet) {
            var t = jpoker.plugins.table.templates;
            var date = new Date(packet.resume_time*1000);
            var date_string;
            if (t.date && (t.date !== '')) {
                date_string = $.strftime(t.date, date);
            } else {
                date_string = date.toLocaleString();
            }
            jpoker.dialog(t.tourney_break.supplant({label: _("This tournament is on break, and will resume at:"),
                            date: date_string}));
        },
        tourney_resume: function(packet) {
            $('#jpokerDialog').dialog('close');
        },
        tourney_end: function(table) {
            var server = jpoker.getServer(table.url);
            server.tourneyRowClick(server, {name: '', game_id: table.tourney_serial});
        },
        quit: function(table, packet) {
        },
        display_done: function(element) {
        },
        chat_changed: function(element) {
        },
        chat_filter: function(table, packet) {
            return packet;
        },
        sound: {
            deal_card: function(server) {
                if(server.preferences.sound) {
                    $('#jpokerSoundTable').html('<' + jpoker.sound + ' src=\'' + jpoker.sound_directory + 'deal_card.swf\' />');
                }
            },
            self_win: function(server) {
                if(server.preferences.sound) {
                    $('#jpokerSoundTable').html('<' + jpoker.sound + ' src=\'' + jpoker.sound_directory + 'player_win.swf\' />');
                }
            }
        },
        animation: {
            deal_card: function(table, id, packet, duration_arg, callback) {
                var duration = duration_arg ? duration_arg : 500;
                var game_window = $('#game_window' + id);
                var dealer_seat = table.dealer;
                var board_cards = {3: $('.jpoker_ptable_board0, .jpoker_ptable_board1, .jpoker_ptable_board2', game_window),
                                   4: $('.jpoker_ptable_board3', game_window),
                                   5: $('.jpoker_ptable_board4', game_window)}[packet.cards.length];
                if ((dealer_seat != -1) && board_cards) {
                    board_cards.each(function() {
                            var dealer = $('#dealer' + dealer_seat + id);
                            var dealerSeatOffset = $('#seat'+ dealer_seat + id).getOffset();
                            var dealerPosition = $('#dealer' + dealer_seat + id).getPosition();
                            var card = $(this);
                            var cardPosition = card.getPosition();
                            var gameFixedOffset = $('#game_fixed' + id).getOffset();
                            dealerPosition.top += dealerSeatOffset.top;
                            dealerPosition.left += dealerSeatOffset.left;
                            dealerPosition.top -= gameFixedOffset.top;
                            dealerPosition.left -= gameFixedOffset.left;
                            dealerPosition.top -= card.height()/2.0;
                            dealerPosition.left -= card.width()/2.0;
                            dealerPosition.top += dealer.height()/2.0;
                            dealerPosition.left += dealer.width()/2.0;
                            card.css({top: dealerPosition.top, left: dealerPosition.left, opacity: 0.0}).animate({top: cardPosition.top, left: cardPosition.left, opacity: 1.0}, duration, callback);
                        });
                }
            },
            best_card: function(table, id, packet, duration_arg, callback) {
                var duration = duration_arg ? duration_arg : 500;
                var game_window = $('#game_window' + id);
                var player = table.serial2player[packet.serial];
                var cards_element = $('.jpoker_ptable_board0, .jpoker_ptable_board1, .jpoker_ptable_board2, .jpoker_ptable_board3, .jpoker_ptable_board4, #card_seat'+player.seat+id+' .jpoker_card', game_window);
                var cards = packet.board.concat(packet.cards);
                if (jpoker.plugins.table.callback.animation.best_card.positions === undefined) {
                    jpoker.plugins.table.callback.animation.best_card.positions = {
                    };
                }
                cards_element.each(function() {
                        if (jpoker.plugins.table.callback.animation.best_card.positions[$(this).attr('id')] === undefined) {
                            jpoker.plugins.table.callback.animation.best_card.positions[$(this).attr('id')] = $(this).getPosition();
                        }
                    });

                cards_element.each(function(i) {
                        if ($(this).hasClass('jpoker_best_card') === false) {
                            if (jQuery.inArray(cards[i], packet.bestcards) != -1) {
                                $(this).addClass('jpoker_best_card').animate({top: '+=8px'}, duration, callback);
                            } else {
                                $(this).animate({opacity: 0.5}, duration, callback);
                            }
                        }
                    });
            },
            best_card_reset: function(table, id) {
                var game_window = $('#game_window' + id);
                if (jpoker.plugins.table.callback.animation.best_card.positions !== undefined) {
                    $.each(jpoker.plugins.table.callback.animation.best_card.positions, function(id, position) {
                            $('#'+id).removeClass('jpoker_best_card').css(position).css({opacity: 1.0});
                        });
                }
            }
        }
    };

    //
    // player (table plugin helper)
    //
    jpoker.plugins.player = {
        create: function(table, packet, id) {
            var url = table.url;
            var game_id = table.id;
            var serial = packet.serial;
            var player = table.serial2player[serial];
            var seat = player.seat;
            var server = jpoker.getServer(url);
            jpoker.plugins.player.seat(seat, id, server, table);
            jpoker.plugins.cards.update_value(player.cards, 'card_seat' + player.seat, id);
            $('#player_seat' + seat + '_bet' + id).addClass('jpoker_bet').html(jpoker.plugins.chips.template);
            $('#player_seat' + seat  + '_money' + id).addClass('jpoker_money').html(jpoker.plugins.chips.template);
            $('#player_seat' + seat  + '_action' + id).addClass('jpoker_action');
            var avatar_element = $('#player_seat' + seat  + '_avatar' + id);
            if ((packet.avatar_url !== undefined) && (packet.avatar_url != 'random')) {
                avatar_element.removeClass().addClass('jpoker_avatar jpoker_ptable_player_seat' + seat + '_avatar ');
                this.avatar.update(player.name, packet.avatar_url, avatar_element);
            } else {
                var avatar = (seat + 1) + (10 * game_id % 2);
                avatar_element.removeClass().addClass('jpoker_avatar jpoker_ptable_player_seat' + seat + '_avatar jpoker_avatar_default_' + avatar);
                avatar_element.empty();
                var avatar_url = server.urls.avatar+'/'+serial;
                server.ajax({url: avatar_url,
                        type: 'GET',
                        global: false,
                        success: function(data, status) {
                        jpoker.plugins.player.avatar.update(player.name, avatar_url, avatar_element);
                        }
                });
            }
            avatar_element.show();
            var seat_element = $('#player_seat' + seat + id);
            seat_element.hover(function() {
                    jpoker.plugins.player.callback.seat_hover_enter(player, id);
                }, function() {
                    jpoker.plugins.player.callback.seat_hover_leave(player, id);
                }).click(function() {
                        jpoker.plugins.player.callback.seat_click(player, id);
                    });
            var timeout_element = $('#player_seat' + seat  + '_timeout' + id).removeClass().addClass('jpoker_timeout jpoker_ptable_player_seat' + seat + '_timeout').html('<div class=\'jpoker_timeout_progress\'></div>');

            jpoker.plugins.player.chips(player, id);
            var name = $('#player_seat' + seat + '_name' + id);
            name.addClass('jpoker_name');
            name.text(player.name);
            if(server.serial == serial) {
                jpoker.plugins.playerSelf.create(table, packet, id);
            }
            if(!player.sit_out && !player.auto) {
                jpoker.plugins.player.sit(player, id);
            } else {
                jpoker.plugins.player.sitOut(player, id);
            }
            this.callback.sound.arrive(server);
            player.registerUpdate(this.update, id, 'update' + id);
            player.registerDestroy(this.destroy, id, 'destroy' + id);
            var stats_element = $('#player_seat' + seat  + '_stats' + id).removeClass().addClass('jpoker_player_stats jpoker_ptable_player_seat' + seat + '_stats');
            var sidepot_element = $('#player_seat' + seat  + '_sidepot' + id).removeClass().addClass('jpoker_player_sidepot jpoker_ptable_player_seat' + seat + '_sidepot').hide();

            $('#player_seat' + seat  + '_hole' + id).addClass('jpoker_player_hole');

            // at the end of player.create: call player_arrive callback
            $('#seat' + seat + id).addClass('jpoker_seat jpoker_seat'+seat);
            seat_element.addClass('jpoker_player_seat jpoker_player_seat'+seat);
            this.callback.player_arrive(seat_element.get(0), serial);
            this.callback.display_done(seat_element.get(0), player);
        },

        leave: function(player, packet, id) {
            var server = jpoker.getServer(player.url);
            if(server.serial == packet.serial) {
                jpoker.plugins.playerSelf.leave(player, packet, id);
            }
        },

        update: function(player, what, packet, id) {
            var server = jpoker.getServer(player.url);

            switch(packet.type) {

            case 'PacketPokerSit':
            jpoker.plugins.player.sit(player, id);
            break;

            case 'PacketPokerSitOut':
            jpoker.plugins.player.sitOut(player, id);
            break;

            case 'PacketPokerAutoFold':
            jpoker.plugins.player.sitOut(player, id);
            break;

            case 'PacketPokerPlayerCards':
            var update = function() {
                jpoker.plugins.cards.update_value(player.cards, 'card_seat' + player.seat, id);
            };
            $('#seat' + player.seat + id).addClass('jpoker_player_dealt');
            if(player.cards.dealt === true) {
                jpoker.plugins.player.callback.animation.deal_card(player, id, undefined, update);
            } else {
                update();
            }
            break;

            case 'PacketPokerBestCards':
            break;

            case 'PacketPokerFold':
            $('#seat' + player.seat + id).removeClass('jpoker_player_dealt');
            jpoker.plugins.player.action(player, id);
            jpoker.plugins.player.callback.sound.fold(server);
            break;

            case 'PacketPokerCheck':
            jpoker.plugins.player.action(player, id);
            jpoker.plugins.player.callback.sound.check(server);
            break;

            case 'PacketPokerCall':
            jpoker.plugins.player.action(player, id);
            jpoker.plugins.player.callback.sound.call(server);
            break;

            case 'PacketPokerRaise':
            jpoker.plugins.player.action(player, id);
            jpoker.plugins.player.callback.sound.raise(server);
            break;

            case 'PacketPokerStart':
            $('#seat' + player.seat + id).removeClass('jpoker_player_dealt');
            jpoker.plugins.player.action(player, id);
            jpoker.plugins.player.handStart(player, id);
            $('#player_seat' + player.seat + id).removeClass('jpoker_player_allin');
            break;

            case 'PacketPokerBeginRound':
            jpoker.plugins.player.beginRound(player, id);
            break;

            case 'PacketPokerHighestBetIncrease':
            jpoker.plugins.player.highestBetIncrease(player, id);
            break;

            case 'PacketPokerInGame':
            jpoker.plugins.player.inGame(player, id);
            break;

            case 'PacketPokerPlayerHandStrength':
            jpoker.plugins.player.handStrength(player, packet.hand, id);
            break;

            case 'PacketPokerTableMove':
            jpoker.plugins.player.tableMove(player, packet, id);
            break;

            case 'PacketPokerEndRound':
            jpoker.plugins.player.action(player, id);
            break;

            case 'PacketPokerPlayerChips':
            jpoker.plugins.player.chips(player, id);
            if (player.all_in === true) {
                $('#player_seat' + player.seat + id).addClass('jpoker_player_allin');
            }
            break;

            case 'PacketPokerChipsBet2Pot':
            jpoker.plugins.player.callback.animation.bet2pot(player, id, packet);
            break;

            case 'PacketPokerChipsPlayer2Bet':
            jpoker.plugins.player.callback.animation.money2bet(player, id);
            break;

            case 'PacketPokerChipsPot2Player':
            jpoker.plugins.player.callback.animation.pot2money(player, id, packet);
            break;

            case 'PacketPokerTimeoutWarning':
            case 'PacketPokerTimeoutNotice':
            if(server.serial == packet.serial) {
                jpoker.plugins.playerSelf.timeout(player, id, packet);
            }
            break;

            case 'PacketPokerSelfInPosition':
            jpoker.plugins.playerSelf.inPosition(player, id);
            break;

            case 'PacketPokerSelfLostPosition':
            jpoker.plugins.playerSelf.lostPosition(player, packet, id);
            break;

            case 'PacketPokerPotChips':
            jpoker.plugins.player.side_pot.update(player, id);
            break;

            case 'PacketPokerChipsPotReset':
            jpoker.plugins.player.side_pot.update(player, id);
            break;

            case 'PacketPokerPlayerStats':
            jpoker.plugins.player.stats.update(player, packet, id);
            break;
            }
            return true;
        },

        handStart: function(player, id) {
            if(jpoker.getServer(player.url).serial == player.serial) {
                jpoker.plugins.playerSelf.handStart(player, id);
            }
        },

        beginRound: function(player, id) {
            if(jpoker.getServer(player.url).serial == player.serial) {
                jpoker.plugins.playerSelf.beginRound(player, id);
            }
        },

        highestBetIncrease: function(player, id) {
            if(jpoker.getServer(player.url).serial == player.serial) {
                jpoker.plugins.playerSelf.highestBetIncrease(player, id);
            }
        },

        inGame: function(player, id) {
            if(jpoker.getServer(player.url).serial == player.serial) {
                jpoker.plugins.playerSelf.inGame(player, id);
            }
        },

        handStrength: function(player, hand, id) {
            if(jpoker.getServer(player.url).serial == player.serial) {
                jpoker.plugins.playerSelf.handStrength(player, hand, id);
            }
        },

        tableMove: function(player, packet, id) {
            if(jpoker.getServer(player.url).serial == player.serial) {
                jpoker.plugins.playerSelf.tableMove(player, packet, id);
            }
        },

        sit: function(player, id) {
            var name = $('#player_seat' + player.seat + id);
            if(name.hasClass('jpoker_sit_out')) {
                name.removeClass('jpoker_sit_out');
            }
            if(jpoker.getServer(player.url).serial == player.serial) {
                jpoker.plugins.playerSelf.sit(player, id);
            }
        },

        sitOut: function(player, id) {
            var name = $('#player_seat' + player.seat + id);
            if(!name.hasClass('jpoker_sit_out')) {
                name.addClass('jpoker_sit_out');
            }
            if(jpoker.getServer(player.url).serial == player.serial) {
                jpoker.plugins.playerSelf.sitOut(player, id);
            }
        },

        chips: function(player, id) {
            jpoker.plugins.chips.update(player.money, '#player_seat' + player.seat + '_money' + id);
            jpoker.plugins.chips.update(player.bet, '#player_seat' + player.seat + '_bet' + id);
            if(jpoker.getServer(player.url).serial == player.serial) {
                jpoker.plugins.playerSelf.chips(player, id);
            }
        },

        action: function(player, id) {
            $('#player_seat' + player.seat + '_action' + id).html(player.action);
        },

        seat: function(seat, id, server, table) {
            var selfPlayerLoggedButNotSit = server.loggedIn() && (table.serial2player[server.serial] === undefined);
            if(table.seats[seat] !== null) {
                $('#seat' + seat + id).show();
                $('#sit_seat' + seat + id).hide();
            } else {
                $('#seat' + seat + id).hide();
                if(selfPlayerLoggedButNotSit && ($.inArray(seat, table.seats_left) != -1)) {
                    var sit = $('#sit_seat' + seat + id);
                    sit.show();
                    sit.click(function() {
                            var server = jpoker.getServer(table.url);
                            if(server && server.loggedIn()) {
                                server.sendPacket({ 'type': 'PacketPokerSeat',
                                            'serial': server.serial,
                                            'game_id': table.id,
                                            'seat': seat
                                            });
                            }
                            $('#sit_seat' + seat + id).addClass('jpoker_self_get_seat');
                        });
                } else {
                    $('#sit_seat' + seat + id).hide();
                }
            }
        },

        side_pot: {
            template : '{label} {index}: {bet}',
            update: function(player, id) {
                if (player.side_pot !== undefined) {
                    var html = this.template.supplant($.extend(player.side_pot, {label: _("Pot")}));
                    $('#player_seat' + player.seat + '_sidepot' + id).html(html).show();
                } else {
                    $('#player_seat' + player.seat + '_sidepot' + id).html('').hide();
                }
            }
        },

        avatar: {
            template : '<img src=\'{url}\' alt=\'{name}\' />',
            update: function(name, url, element) {
                return element.html(this.template.supplant({ name: name, url: url }));
            }
        },

        stats: {
            templates: {
                rank: '<div class=\'jpoker_player_rank\'>{rank}</div>',
                level: '<div class=\'jpoker_player_level jpoker_player_level_{level}\'></div>'
            },
            getLevel: function(percentile) {
                var level;
                if (percentile >= 3) {
                    level = 'master';
                } else if (percentile >= 2) {
                    level = 'expert';
                } else if (percentile >= 1) {
                    level = 'pro';
                } else if (percentile >= 0) {
                    level = 'junior';
                }
                return level;
            },
            getHTML: function(packet) {
                var html = [];
                var t = this.templates;
                if ((packet.rank !== undefined) && (packet.rank !== null)) {
                    html.push(t.rank.supplant({rank: packet.rank}));
                }
                if ((packet.level !== undefined) && (packet.level !== null)) {
                    html.push(t.level.supplant({level: packet.level}));
                }
                return html.join('\n');
            },
            update: function(player, packet, id) {
                packet.level = this.getLevel(packet.percentile);
                $('#player_seat' + player.seat + '_stats' + id).html(this.getHTML(packet));
                $('#player_seat' + player.seat + id).addClass('jpoker_player_level_'+packet.level);
            }
        },

        destroy: function(player, what, dummy, id) {
            var server = jpoker.servers[player.url];
            var table = server.tables[player.game_id];
            jpoker.plugins.player.seat(player.seat, id, server, table);
            if(player.serial == server.serial) {
                jpoker.plugins.playerSelf.destroy(player, dummy, id);
            }
        },

        callback: {
            seat_hover_enter: function(player, id) {
                $('#player_seat' + player.seat  + id).addClass('jpoker_seat_hover');
            },
            seat_hover_leave: function(player, id) {
                $('#player_seat' + player.seat  + id).removeClass('jpoker_seat_hover');
            },
            seat_click: function(player, id) {
            },
            player_arrive: function(element, serial) {
            },
            display_done: function(element, player) {
            },
            sound: {
                arrive: function(server) {
                    if(server.preferences.sound) {
                        $('#jpokerSound').html('<' + jpoker.sound + ' src=\'' + jpoker.sound_directory + 'player_arrive.swf\' />');
                    }
                },
                call: function(server) {
                    if(server.preferences.sound) {
                        $('#jpokerSoundAction').html('<' + jpoker.sound + ' src=\'' + jpoker.sound_directory + 'player_call.swf\' />');
                    }
                },
                raise: function(server) {
                    if(server.preferences.sound) {
                        $('#jpokerSoundAction').html('<' + jpoker.sound + ' src=\'' + jpoker.sound_directory + 'player_bet.swf\' />');
                    }
                },
                fold: function(server) {
                    if(server.preferences.sound) {
                        $('#jpokerSoundAction').html('<' + jpoker.sound + ' src=\'' + jpoker.sound_directory + 'player_fold.swf\' />');
                    }
                },
                check: function(server) {
                    if(server.preferences.sound) {
                        $('#jpokerSoundAction').html('<' + jpoker.sound + ' src=\'' + jpoker.sound_directory + 'player_check.swf\' />');
                    }
                }

            },
            animation: {
                money2bet: function(player, id, duration_arg, callback) {
                    var duration = duration_arg ? duration_arg : 500;
                    var bet = $('#player_seat' + player.seat + '_bet' + id);
                    var bet_position = bet.getPosition();
                    var money = $('#player_seat' + player.seat + '_money' + id);
                    var money_position = money.getPosition();
                    var seat_offset = $('#seat'+ player.seat + id).getOffset();
                    var player_seat_offset = $('#player_seat'+ player.seat + id).getOffset();
                    money_position.top += player_seat_offset.top;
                    money_position.left += player_seat_offset.left;
                    money_position.top -= seat_offset.top;
                    money_position.left -= seat_offset.left;
                    bet.css({top: money_position.top, left: money_position.left, opacity: 0}).animate({top: bet_position.top, left: bet_position.left, opacity: 1.0}, duration, callback);
                },
                deal_card: function(player, id, duration_arg, callback) {
                    var duration = duration_arg ? duration_arg : 500;
                    var table = jpoker.getTable(player.url, player.game_id);
                    var playerSeatOffset = $('#seat'+ player.seat + id).getOffset();
                    var hole = $('#player_seat'+ player.seat + '_hole' + id);
                    var holePosition = hole.getPosition();
                    var dealer_seat = table.dealer;
                    var dealer, dealerSeatOffset, dealerPosition;
                    if (dealer_seat != -1) {
                        dealer = $('#dealer' + dealer_seat + id);
                        dealerSeatOffset = $('#seat'+ dealer_seat + id).getOffset();
                        dealerPosition = $('#dealer' + dealer_seat + id).getPosition();
                        dealerPosition.top += dealerSeatOffset.top;
                        dealerPosition.top -= playerSeatOffset.top;
                        dealerPosition.left += dealerSeatOffset.left;
                        dealerPosition.left -= playerSeatOffset.left;
                        dealerPosition.top -= hole.height()/2.0;
                        dealerPosition.left -= hole.width()/2.0;
                        dealerPosition.top += dealer.height()/2.0;
                        dealerPosition.left += dealer.width()/2.0;
                        hole.css({top: dealerPosition.top, left: dealerPosition.left, opacity: 0}).animate({top: holePosition.top, left: holePosition.left, opacity: 1.0}, duration, callback);
                    } else {
                        callback.call();
                    }
                },
                bet2pot: function(player, id, packet, duration_arg, callback) {
                    var duration = duration_arg ? duration_arg : 500;
                    var bet = $('#player_seat' + player.seat + '_bet' + id);
                    var chip = bet.clone().insertAfter(bet).addClass('jpoker_bet2pot_animation');
                    var pots_element = $('#pots' + id);
                    var pots_offset = pots_element.getOffset();
                    var player_seat_offset = $('#seat'+ player.seat + id).getOffset();
                    var pot_position = $('.jpoker_pot' + packet.pot).getPosition();
                    var remove_chip = function() {
                        chip.remove();
                    };
                    pot_position.left += pots_offset.left;
                    pot_position.left -= player_seat_offset.left;
                    pot_position.top += pots_offset.top;
                    pot_position.top -= player_seat_offset.top;
                    chip.css({opacity: 1}).animate({top: pot_position.top, left: pot_position.left, opacity: 0.0}, duration, callback ? function() {callback(remove_chip);} : remove_chip);
                },
                pot2money: function(player, id, packet, duration_arg, callback, hook) {
                    var duration = duration_arg ? duration_arg : 500;
                    var pots = $('#pots' + id);
                    var pots_offset = pots.getOffset();
                    var pot = $('.jpoker_pot' + packet.pot, pots).not('.jpoker_pot2money_animation');
                    var chip = pot.show().clone().insertAfter(pot).addClass('jpoker_pot2money_animation');
                    var money_element = $('#player_seat' + player.seat + '_money' + id);
                    var player_seat_offset = $('#player_seat'+ player.seat + id).getOffset();
                    var money_position = money_element.getPosition();
                    var pot_position = pot.getPosition();
                    var remove_chip = function() {
                        chip.remove();
                    };
                    pot.hide();
                    money_position.top += player_seat_offset.top;
                    money_position.left += player_seat_offset.left;
                    money_position.top -= pots_offset.top;
                    money_position.left -= pots_offset.left;
                    chip.css({opacity: 1, position: 'absolute', top: pot_position.top, left: pot_position.left});
                    if (hook !== undefined) {
                        hook(chip);
                    }
                    chip.animate({top: money_position.top, left: money_position.left, opacity: 0.0}, duration, callback ? function() {callback(remove_chip, chip);} : remove_chip);
                }
            }
        }
    };
 
